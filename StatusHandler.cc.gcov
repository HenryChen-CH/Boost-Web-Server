        -:    0:Source:src/StatusHandler.cc
        -:    0:Graph:src/StatusHandler.gcno
        -:    0:Data:src/StatusHandler.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "StatusHandler.h"
        -:    2:
        1:    3:std::vector<std::pair<std::string, Response::ResponseCode >> StatusHandler::request_logs_;
        1:    4:std::map<std::string, std::string> StatusHandler::handlers_name_;
        -:    5:std::mutex StatusHandler::request_mutex_;
        -:    6:
        1:    7:RequestHandler::Status StatusHandler::Init(const std::string& uri_prefix, const NginxConfig& config) {
        1:    8:    uri_prefix_ = uri_prefix;
        1:    9:    return OK;
        -:   10:}
        -:   11:
        1:   12:RequestHandler::Status StatusHandler::HandleRequest(const Request& request, Response* response) {
        1:   13:    response->SetStatus(Response::ok);
        1:   14:    response->SetVersion("HTTP/1.0");
        1:   15:    response->AddHeader(header_content_type_, "text/html");
        1:   16:    std::lock_guard<std::mutex> lock(request_mutex_);
        2:   17:    std::map<Response::ResponseCode ,int> response_code_;
        2:   18:    std::map<std::string, int> uri_;
        1:   19:    for (auto& p: request_logs_) {
    #####:   20:        response_code_[p.second]++;
    #####:   21:        uri_[p.first]++;
        -:   22:    }
        -:   23:
        2:   24:    std::stringstream ss;
        1:   25:    ss << "<html>" << "<head><title>Status</title></head>" << "<body>";
        1:   26:    ss << "<h1>Status</h1>";
        1:   27:    ss << "<h2>Request Statics</h2>";
        1:   28:    ss << "<table border=1>";
        1:   29:    ss << "<tr><td>uri</td><td>n</td></tr>";
        1:   30:    for (auto& p: uri_) {
    #####:   31:        ss << "<tr><td>" << p.first << "</td><td>" << p.second << "</td></tr>";
        -:   32:    }
        1:   33:    ss << "<tr><td>" << "total" << "</td><td>" << request_logs_.size() << "</td></tr>";
        1:   34:    ss << "</table>";
        1:   35:    ss << "<br>";
        1:   36:    ss << "<table border=1>";
        1:   37:    ss << "<tr><td>response code</td><td>n</td></tr>";
        1:   38:    for (auto& p: response_code_) {
    #####:   39:        ss << "<tr><td>" << p.first << "</td><td>" << p.second << "</td></tr>";
        -:   40:    }
        1:   41:    ss << "<tr><td>" << "total" << "</td><td>" << request_logs_.size() << "</td></tr>";
        1:   42:    ss << "</table>";
        -:   43:
        1:   44:    ss << "<h2>Active Handlers</h2>";
        1:   45:    ss << "<table border=1>";
        1:   46:    ss << "<tr><td>" << "uri" << "</td><td>" << "Handler Class" << "</td></tr>";
        1:   47:    for (auto& p: handlers_name_) {
    #####:   48:        ss << "<tr><td>" << p.first << "</td><td>" << p.second << "</td></tr>";
        -:   49:    }
        1:   50:    ss << "</table>";
        -:   51:
        1:   52:    ss << "<h2>History</h2>";
        1:   53:    ss << "<table border=1>";
        1:   54:    ss << "<tr><td>uri</td><td>response code</td></tr>";
        1:   55:    for (auto& p: request_logs_) {
    #####:   56:        ss << "<tr><td>" << p.first << "</td><td>" << p.second << "</td></tr>";
        -:   57:    }
        1:   58:    ss << "</table>";
        1:   59:    ss << "</body></html>";
        1:   60:    response->SetBody(ss.str());
        2:   61:    return OK;
        -:   62:}
        -:   63:
    #####:   64:void StatusHandler::LogRequest(std::string uri, Response::ResponseCode code) {
    #####:   65:    std::lock_guard<std::mutex> lock(request_mutex_);
    #####:   66:    request_logs_.push_back(std::make_pair(uri, code));
    #####:   67:}
        -:   68:
    #####:   69:void StatusHandler::LogHandler(std::string uri, std::string name) {
    #####:   70:    handlers_name_[uri] = name;
        3:   71:}
