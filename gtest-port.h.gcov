        -:    0:Source:googletest/googletest/include/gtest/internal/gtest-port.h
        -:    0:Graph:mime_types_test.gcno
        -:    0:Data:mime_types_test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Authors: wan@google.com (Zhanyong Wan)
        -:   31://
        -:   32:// Low-level types and utilities for porting Google Test to various
        -:   33:// platforms.  All macros ending with _ and symbols defined in an
        -:   34:// internal namespace are subject to change without notice.  Code
        -:   35:// outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't
        -:   36:// end with _ are part of Google Test's public API and can be used by
        -:   37:// code outside Google Test.
        -:   38://
        -:   39:// This file is fundamental to Google Test.  All other Google Test source
        -:   40:// files are expected to #include this.  Therefore, it cannot #include
        -:   41:// any other Google Test header.
        -:   42:
        -:   43:#ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   44:#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
        -:   45:
        -:   46:// Environment-describing macros
        -:   47:// -----------------------------
        -:   48://
        -:   49:// Google Test can be used in many different environments.  Macros in
        -:   50:// this section tell Google Test what kind of environment it is being
        -:   51:// used in, such that Google Test can provide environment-specific
        -:   52:// features and implementations.
        -:   53://
        -:   54:// Google Test tries to automatically detect the properties of its
        -:   55:// environment, so users usually don't need to worry about these
        -:   56:// macros.  However, the automatic detection is not perfect.
        -:   57:// Sometimes it's necessary for a user to define some of the following
        -:   58:// macros in the build script to override Google Test's decisions.
        -:   59://
        -:   60:// If the user doesn't define a macro in the list, Google Test will
        -:   61:// provide a default definition.  After this header is #included, all
        -:   62:// macros in this list will be defined to either 1 or 0.
        -:   63://
        -:   64:// Notes to maintainers:
        -:   65://   - Each macro here is a user-tweakable knob; do not grow the list
        -:   66://     lightly.
        -:   67://   - Use #if to key off these macros.  Don't use #ifdef or "#if
        -:   68://     defined(...)", which will not work as these macros are ALWAYS
        -:   69://     defined.
        -:   70://
        -:   71://   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)
        -:   72://                              is/isn't available.
        -:   73://   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions
        -:   74://                              are enabled.
        -:   75://   GTEST_HAS_GLOBAL_STRING  - Define it to 1/0 to indicate that ::string
        -:   76://                              is/isn't available (some systems define
        -:   77://                              ::string, which is different to std::string).
        -:   78://   GTEST_HAS_GLOBAL_WSTRING - Define it to 1/0 to indicate that ::string
        -:   79://                              is/isn't available (some systems define
        -:   80://                              ::wstring, which is different to std::wstring).
        -:   81://   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular
        -:   82://                              expressions are/aren't available.
        -:   83://   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>
        -:   84://                              is/isn't available.
        -:   85://   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't
        -:   86://                              enabled.
        -:   87://   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that
        -:   88://                              std::wstring does/doesn't work (Google Test can
        -:   89://                              be used where std::wstring is unavailable).
        -:   90://   GTEST_HAS_TR1_TUPLE      - Define it to 1/0 to indicate tr1::tuple
        -:   91://                              is/isn't available.
        -:   92://   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
        -:   93://                              compiler supports Microsoft's "Structured
        -:   94://                              Exception Handling".
        -:   95://   GTEST_HAS_STREAM_REDIRECTION
        -:   96://                            - Define it to 1/0 to indicate whether the
        -:   97://                              platform supports I/O stream redirection using
        -:   98://                              dup() and dup2().
        -:   99://   GTEST_USE_OWN_TR1_TUPLE  - Define it to 1/0 to indicate whether Google
        -:  100://                              Test's own tr1 tuple implementation should be
        -:  101://                              used.  Unused when the user sets
        -:  102://                              GTEST_HAS_TR1_TUPLE to 0.
        -:  103://   GTEST_LANG_CXX11         - Define it to 1/0 to indicate that Google Test
        -:  104://                              is building in C++11/C++98 mode.
        -:  105://   GTEST_LINKED_AS_SHARED_LIBRARY
        -:  106://                            - Define to 1 when compiling tests that use
        -:  107://                              Google Test as a shared library (known as
        -:  108://                              DLL on Windows).
        -:  109://   GTEST_CREATE_SHARED_LIBRARY
        -:  110://                            - Define to 1 when compiling Google Test itself
        -:  111://                              as a shared library.
        -:  112:
        -:  113:// Platform-indicating macros
        -:  114:// --------------------------
        -:  115://
        -:  116:// Macros indicating the platform on which Google Test is being used
        -:  117:// (a macro is defined to 1 if compiled on the given platform;
        -:  118:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  119:// defines these macros automatically.  Code outside Google Test MUST
        -:  120:// NOT define them.
        -:  121://
        -:  122://   GTEST_OS_AIX      - IBM AIX
        -:  123://   GTEST_OS_CYGWIN   - Cygwin
        -:  124://   GTEST_OS_FREEBSD  - FreeBSD
        -:  125://   GTEST_OS_HPUX     - HP-UX
        -:  126://   GTEST_OS_LINUX    - Linux
        -:  127://     GTEST_OS_LINUX_ANDROID - Google Android
        -:  128://   GTEST_OS_MAC      - Mac OS X
        -:  129://     GTEST_OS_IOS    - iOS
        -:  130://   GTEST_OS_NACL     - Google Native Client (NaCl)
        -:  131://   GTEST_OS_OPENBSD  - OpenBSD
        -:  132://   GTEST_OS_QNX      - QNX
        -:  133://   GTEST_OS_SOLARIS  - Sun Solaris
        -:  134://   GTEST_OS_SYMBIAN  - Symbian
        -:  135://   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)
        -:  136://     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop
        -:  137://     GTEST_OS_WINDOWS_MINGW    - MinGW
        -:  138://     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile
        -:  139://     GTEST_OS_WINDOWS_PHONE    - Windows Phone
        -:  140://     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT
        -:  141://   GTEST_OS_ZOS      - z/OS
        -:  142://
        -:  143:// Among the platforms, Cygwin, Linux, Max OS X, and Windows have the
        -:  144:// most stable support.  Since core members of the Google Test project
        -:  145:// don't have access to other platforms, support for them may be less
        -:  146:// stable.  If you notice any problems on your platform, please notify
        -:  147:// googletestframework@googlegroups.com (patches for fixing them are
        -:  148:// even more welcome!).
        -:  149://
        -:  150:// It is possible that none of the GTEST_OS_* macros are defined.
        -:  151:
        -:  152:// Feature-indicating macros
        -:  153:// -------------------------
        -:  154://
        -:  155:// Macros indicating which Google Test features are available (a macro
        -:  156:// is defined to 1 if the corresponding feature is supported;
        -:  157:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
        -:  158:// defines these macros automatically.  Code outside Google Test MUST
        -:  159:// NOT define them.
        -:  160://
        -:  161:// These macros are public so that portable tests can be written.
        -:  162:// Such tests typically surround code using a feature with an #if
        -:  163:// which controls that code.  For example:
        -:  164://
        -:  165:// #if GTEST_HAS_DEATH_TEST
        -:  166://   EXPECT_DEATH(DoSomethingDeadly());
        -:  167:// #endif
        -:  168://
        -:  169://   GTEST_HAS_COMBINE      - the Combine() function (for value-parameterized
        -:  170://                            tests)
        -:  171://   GTEST_HAS_DEATH_TEST   - death tests
        -:  172://   GTEST_HAS_PARAM_TEST   - value-parameterized tests
        -:  173://   GTEST_HAS_TYPED_TEST   - typed tests
        -:  174://   GTEST_HAS_TYPED_TEST_P - type-parameterized tests
        -:  175://   GTEST_IS_THREADSAFE    - Google Test is thread-safe.
        -:  176://   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with
        -:  177://                            GTEST_HAS_POSIX_RE (see above) which users can
        -:  178://                            define themselves.
        -:  179://   GTEST_USES_SIMPLE_RE   - our own simple regex is used;
        -:  180://                            the above two are mutually exclusive.
        -:  181://   GTEST_CAN_COMPARE_NULL - accepts untyped NULL in EXPECT_EQ().
        -:  182:
        -:  183:// Misc public macros
        -:  184:// ------------------
        -:  185://
        -:  186://   GTEST_FLAG(flag_name)  - references the variable corresponding to
        -:  187://                            the given Google Test flag.
        -:  188:
        -:  189:// Internal utilities
        -:  190:// ------------------
        -:  191://
        -:  192:// The following macros and utilities are for Google Test's INTERNAL
        -:  193:// use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.
        -:  194://
        -:  195:// Macros for basic C++ coding:
        -:  196://   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.
        -:  197://   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a
        -:  198://                              variable don't have to be used.
        -:  199://   GTEST_DISALLOW_ASSIGN_   - disables operator=.
        -:  200://   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.
        -:  201://   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.
        -:  202://   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is
        -:  203://                                        suppressed (constant conditional).
        -:  204://   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127
        -:  205://                                        is suppressed.
        -:  206://
        -:  207:// C++11 feature wrappers:
        -:  208://
        -:  209://   testing::internal::move  - portability wrapper for std::move.
        -:  210://
        -:  211:// Synchronization:
        -:  212://   Mutex, MutexLock, ThreadLocal, GetThreadCount()
        -:  213://                            - synchronization primitives.
        -:  214://
        -:  215:// Template meta programming:
        -:  216://   is_pointer     - as in TR1; needed on Symbian and IBM XL C/C++ only.
        -:  217://   IteratorTraits - partial implementation of std::iterator_traits, which
        -:  218://                    is not available in libCstd when compiled with Sun C++.
        -:  219://
        -:  220:// Smart pointers:
        -:  221://   scoped_ptr     - as in TR2.
        -:  222://
        -:  223:// Regular expressions:
        -:  224://   RE             - a simple regular expression class using the POSIX
        -:  225://                    Extended Regular Expression syntax on UNIX-like
        -:  226://                    platforms, or a reduced regular exception syntax on
        -:  227://                    other platforms, including Windows.
        -:  228://
        -:  229:// Logging:
        -:  230://   GTEST_LOG_()   - logs messages at the specified severity level.
        -:  231://   LogToStderr()  - directs all log messages to stderr.
        -:  232://   FlushInfoLog() - flushes informational log messages.
        -:  233://
        -:  234:// Stdout and stderr capturing:
        -:  235://   CaptureStdout()     - starts capturing stdout.
        -:  236://   GetCapturedStdout() - stops capturing stdout and returns the captured
        -:  237://                         string.
        -:  238://   CaptureStderr()     - starts capturing stderr.
        -:  239://   GetCapturedStderr() - stops capturing stderr and returns the captured
        -:  240://                         string.
        -:  241://
        -:  242:// Integer types:
        -:  243://   TypeWithSize   - maps an integer to a int type.
        -:  244://   Int32, UInt32, Int64, UInt64, TimeInMillis
        -:  245://                  - integers of known sizes.
        -:  246://   BiggestInt     - the biggest signed integer type.
        -:  247://
        -:  248:// Command-line utilities:
        -:  249://   GTEST_DECLARE_*()  - declares a flag.
        -:  250://   GTEST_DEFINE_*()   - defines a flag.
        -:  251://   GetInjectableArgvs() - returns the command line as a vector of strings.
        -:  252://
        -:  253:// Environment variable utilities:
        -:  254://   GetEnv()             - gets the value of an environment variable.
        -:  255://   BoolFromGTestEnv()   - parses a bool environment variable.
        -:  256://   Int32FromGTestEnv()  - parses an Int32 environment variable.
        -:  257://   StringFromGTestEnv() - parses a string environment variable.
        -:  258:
        -:  259:#include <ctype.h>   // for isspace, etc
        -:  260:#include <stddef.h>  // for ptrdiff_t
        -:  261:#include <stdlib.h>
        -:  262:#include <stdio.h>
        -:  263:#include <string.h>
        -:  264:#ifndef _WIN32_WCE
        -:  265:# include <sys/types.h>
        -:  266:# include <sys/stat.h>
        -:  267:#endif  // !_WIN32_WCE
        -:  268:
        -:  269:#if defined __APPLE__
        -:  270:# include <AvailabilityMacros.h>
        -:  271:# include <TargetConditionals.h>
        -:  272:#endif
        -:  273:
        -:  274:#include <algorithm>  // NOLINT
        -:  275:#include <iostream>  // NOLINT
        -:  276:#include <sstream>  // NOLINT
        -:  277:#include <string>  // NOLINT
        -:  278:#include <utility>
        -:  279:#include <vector>  // NOLINT
        -:  280:
        -:  281:#include "gtest/internal/gtest-port-arch.h"
        -:  282:#include "gtest/internal/custom/gtest-port.h"
        -:  283:
        -:  284:#if !defined(GTEST_DEV_EMAIL_)
        -:  285:# define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"
        -:  286:# define GTEST_FLAG_PREFIX_ "gtest_"
        -:  287:# define GTEST_FLAG_PREFIX_DASH_ "gtest-"
        -:  288:# define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"
        -:  289:# define GTEST_NAME_ "Google Test"
        -:  290:# define GTEST_PROJECT_URL_ "https://github.com/google/googletest/"
        -:  291:#endif  // !defined(GTEST_DEV_EMAIL_)
        -:  292:
        -:  293:#if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  294:# define GTEST_INIT_GOOGLE_TEST_NAME_ "testing::InitGoogleTest"
        -:  295:#endif  // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
        -:  296:
        -:  297:// Determines the version of gcc that is used to compile this.
        -:  298:#ifdef __GNUC__
        -:  299:// 40302 means version 4.3.2.
        -:  300:# define GTEST_GCC_VER_ \
        -:  301:    (__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__)
        -:  302:#endif  // __GNUC__
        -:  303:
        -:  304:// Macros for disabling Microsoft Visual C++ warnings.
        -:  305://
        -:  306://   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)
        -:  307://   /* code that triggers warnings C4800 and C4385 */
        -:  308://   GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  309:#if _MSC_VER >= 1500
        -:  310:# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \
        -:  311:    __pragma(warning(push))                        \
        -:  312:    __pragma(warning(disable: warnings))
        -:  313:# define GTEST_DISABLE_MSC_WARNINGS_POP_()          \
        -:  314:    __pragma(warning(pop))
        -:  315:#else
        -:  316:// Older versions of MSVC don't have __pragma.
        -:  317:# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)
        -:  318:# define GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  319:#endif
        -:  320:
        -:  321:#ifndef GTEST_LANG_CXX11
        -:  322:// gcc and clang define __GXX_EXPERIMENTAL_CXX0X__ when
        -:  323:// -std={c,gnu}++{0x,11} is passed.  The C++11 standard specifies a
        -:  324:// value for __cplusplus, and recent versions of clang, gcc, and
        -:  325:// probably other compilers set that too in C++11 mode.
        -:  326:# if __GXX_EXPERIMENTAL_CXX0X__ || __cplusplus >= 201103L
        -:  327:// Compiling in at least C++11 mode.
        -:  328:#  define GTEST_LANG_CXX11 1
        -:  329:# else
        -:  330:#  define GTEST_LANG_CXX11 0
        -:  331:# endif
        -:  332:#endif
        -:  333:
        -:  334:// Distinct from C++11 language support, some environments don't provide
        -:  335:// proper C++11 library support. Notably, it's possible to build in
        -:  336:// C++11 mode when targeting Mac OS X 10.6, which has an old libstdc++
        -:  337:// with no C++11 support.
        -:  338://
        -:  339:// libstdc++ has sufficient C++11 support as of GCC 4.6.0, __GLIBCXX__
        -:  340:// 20110325, but maintenance releases in the 4.4 and 4.5 series followed
        -:  341:// this date, so check for those versions by their date stamps.
        -:  342:// https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html#abi.versioning
        -:  343:#if GTEST_LANG_CXX11 && \
        -:  344:    (!defined(__GLIBCXX__) || ( \
        -:  345:        __GLIBCXX__ >= 20110325ul &&  /* GCC >= 4.6.0 */ \
        -:  346:        /* Blacklist of patch releases of older branches: */ \
        -:  347:        __GLIBCXX__ != 20110416ul &&  /* GCC 4.4.6 */ \
        -:  348:        __GLIBCXX__ != 20120313ul &&  /* GCC 4.4.7 */ \
        -:  349:        __GLIBCXX__ != 20110428ul &&  /* GCC 4.5.3 */ \
        -:  350:        __GLIBCXX__ != 20120702ul))   /* GCC 4.5.4 */
        -:  351:# define GTEST_STDLIB_CXX11 1
        -:  352:#endif
        -:  353:
        -:  354:// Only use C++11 library features if the library provides them.
        -:  355:#if GTEST_STDLIB_CXX11
        -:  356:# define GTEST_HAS_STD_BEGIN_AND_END_ 1
        -:  357:# define GTEST_HAS_STD_FORWARD_LIST_ 1
        -:  358:# define GTEST_HAS_STD_FUNCTION_ 1
        -:  359:# define GTEST_HAS_STD_INITIALIZER_LIST_ 1
        -:  360:# define GTEST_HAS_STD_MOVE_ 1
        -:  361:# define GTEST_HAS_STD_SHARED_PTR_ 1
        -:  362:# define GTEST_HAS_STD_TYPE_TRAITS_ 1
        -:  363:# define GTEST_HAS_STD_UNIQUE_PTR_ 1
        -:  364:#endif
        -:  365:
        -:  366:// C++11 specifies that <tuple> provides std::tuple.
        -:  367:// Some platforms still might not have it, however.
        -:  368:#if GTEST_LANG_CXX11
        -:  369:# define GTEST_HAS_STD_TUPLE_ 1
        -:  370:# if defined(__clang__)
        -:  371:// Inspired by http://clang.llvm.org/docs/LanguageExtensions.html#__has_include
        -:  372:#  if defined(__has_include) && !__has_include(<tuple>)
        -:  373:#   undef GTEST_HAS_STD_TUPLE_
        -:  374:#  endif
        -:  375:# elif defined(_MSC_VER)
        -:  376:// Inspired by boost/config/stdlib/dinkumware.hpp
        -:  377:#  if defined(_CPPLIB_VER) && _CPPLIB_VER < 520
        -:  378:#   undef GTEST_HAS_STD_TUPLE_
        -:  379:#  endif
        -:  380:# elif defined(__GLIBCXX__)
        -:  381:// Inspired by boost/config/stdlib/libstdcpp3.hpp,
        -:  382:// http://gcc.gnu.org/gcc-4.2/changes.html and
        -:  383:// http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt01ch01.html#manual.intro.status.standard.200x
        -:  384:#  if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 2)
        -:  385:#   undef GTEST_HAS_STD_TUPLE_
        -:  386:#  endif
        -:  387:# endif
        -:  388:#endif
        -:  389:
        -:  390:// Brings in definitions for functions used in the testing::internal::posix
        -:  391:// namespace (read, write, close, chdir, isatty, stat). We do not currently
        -:  392:// use them on Windows Mobile.
        -:  393:#if GTEST_OS_WINDOWS
        -:  394:# if !GTEST_OS_WINDOWS_MOBILE
        -:  395:#  include <direct.h>
        -:  396:#  include <io.h>
        -:  397:# endif
        -:  398:// In order to avoid having to include <windows.h>, use forward declaration
        -:  399:#if GTEST_OS_WINDOWS_MINGW && !defined(__MINGW64_VERSION_MAJOR)
        -:  400:// MinGW defined _CRITICAL_SECTION and _RTL_CRITICAL_SECTION as two
        -:  401:// separate (equivalent) structs, instead of using typedef
        -:  402:typedef struct _CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  403:#else
        -:  404:// Assume CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.
        -:  405:// This assumption is verified by
        -:  406:// WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.
        -:  407:typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;
        -:  408:#endif
        -:  409:#else
        -:  410:// This assumes that non-Windows OSes provide unistd.h. For OSes where this
        -:  411:// is not the case, we need to include headers that provide the functions
        -:  412:// mentioned above.
        -:  413:# include <unistd.h>
        -:  414:# include <strings.h>
        -:  415:#endif  // GTEST_OS_WINDOWS
        -:  416:
        -:  417:#if GTEST_OS_LINUX_ANDROID
        -:  418:// Used to define __ANDROID_API__ matching the target NDK API level.
        -:  419:#  include <android/api-level.h>  // NOLINT
        -:  420:#endif
        -:  421:
        -:  422:// Defines this to true iff Google Test can use POSIX regular expressions.
        -:  423:#ifndef GTEST_HAS_POSIX_RE
        -:  424:# if GTEST_OS_LINUX_ANDROID
        -:  425:// On Android, <regex.h> is only available starting with Gingerbread.
        -:  426:#  define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)
        -:  427:# else
        -:  428:#  define GTEST_HAS_POSIX_RE (!GTEST_OS_WINDOWS)
        -:  429:# endif
        -:  430:#endif
        -:  431:
        -:  432:#if GTEST_USES_PCRE
        -:  433:// The appropriate headers have already been included.
        -:  434:
        -:  435:#elif GTEST_HAS_POSIX_RE
        -:  436:
        -:  437:// On some platforms, <regex.h> needs someone to define size_t, and
        -:  438:// won't compile otherwise.  We can #include it here as we already
        -:  439:// included <stdlib.h>, which is guaranteed to define size_t through
        -:  440:// <stddef.h>.
        -:  441:# include <regex.h>  // NOLINT
        -:  442:
        -:  443:# define GTEST_USES_POSIX_RE 1
        -:  444:
        -:  445:#elif GTEST_OS_WINDOWS
        -:  446:
        -:  447:// <regex.h> is not available on Windows.  Use our own simple regex
        -:  448:// implementation instead.
        -:  449:# define GTEST_USES_SIMPLE_RE 1
        -:  450:
        -:  451:#else
        -:  452:
        -:  453:// <regex.h> may not be available on this platform.  Use our own
        -:  454:// simple regex implementation instead.
        -:  455:# define GTEST_USES_SIMPLE_RE 1
        -:  456:
        -:  457:#endif  // GTEST_USES_PCRE
        -:  458:
        -:  459:#ifndef GTEST_HAS_EXCEPTIONS
        -:  460:// The user didn't tell us whether exceptions are enabled, so we need
        -:  461:// to figure it out.
        -:  462:# if defined(_MSC_VER) || defined(__BORLANDC__)
        -:  463:// MSVC's and C++Builder's implementations of the STL use the _HAS_EXCEPTIONS
        -:  464:// macro to enable exceptions, so we'll do the same.
        -:  465:// Assumes that exceptions are enabled by default.
        -:  466:#  ifndef _HAS_EXCEPTIONS
        -:  467:#   define _HAS_EXCEPTIONS 1
        -:  468:#  endif  // _HAS_EXCEPTIONS
        -:  469:#  define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS
        -:  470:# elif defined(__clang__)
        -:  471:// clang defines __EXCEPTIONS iff exceptions are enabled before clang 220714,
        -:  472:// but iff cleanups are enabled after that. In Obj-C++ files, there can be
        -:  473:// cleanups for ObjC exceptions which also need cleanups, even if C++ exceptions
        -:  474:// are disabled. clang has __has_feature(cxx_exceptions) which checks for C++
        -:  475:// exceptions starting at clang r206352, but which checked for cleanups prior to
        -:  476:// that. To reliably check for C++ exception availability with clang, check for
        -:  477:// __EXCEPTIONS && __has_feature(cxx_exceptions).
        -:  478:#  define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))
        -:  479:# elif defined(__GNUC__) && __EXCEPTIONS
        -:  480:// gcc defines __EXCEPTIONS to 1 iff exceptions are enabled.
        -:  481:#  define GTEST_HAS_EXCEPTIONS 1
        -:  482:# elif defined(__SUNPRO_CC)
        -:  483:// Sun Pro CC supports exceptions.  However, there is no compile-time way of
        -:  484:// detecting whether they are enabled or not.  Therefore, we assume that
        -:  485:// they are enabled unless the user tells us otherwise.
        -:  486:#  define GTEST_HAS_EXCEPTIONS 1
        -:  487:# elif defined(__IBMCPP__) && __EXCEPTIONS
        -:  488:// xlC defines __EXCEPTIONS to 1 iff exceptions are enabled.
        -:  489:#  define GTEST_HAS_EXCEPTIONS 1
        -:  490:# elif defined(__HP_aCC)
        -:  491:// Exception handling is in effect by default in HP aCC compiler. It has to
        -:  492:// be turned of by +noeh compiler option if desired.
        -:  493:#  define GTEST_HAS_EXCEPTIONS 1
        -:  494:# else
        -:  495:// For other compilers, we assume exceptions are disabled to be
        -:  496:// conservative.
        -:  497:#  define GTEST_HAS_EXCEPTIONS 0
        -:  498:# endif  // defined(_MSC_VER) || defined(__BORLANDC__)
        -:  499:#endif  // GTEST_HAS_EXCEPTIONS
        -:  500:
        -:  501:#if !defined(GTEST_HAS_STD_STRING)
        -:  502:// Even though we don't use this macro any longer, we keep it in case
        -:  503:// some clients still depend on it.
        -:  504:# define GTEST_HAS_STD_STRING 1
        -:  505:#elif !GTEST_HAS_STD_STRING
        -:  506:// The user told us that ::std::string isn't available.
        -:  507:# error "Google Test cannot be used where ::std::string isn't available."
        -:  508:#endif  // !defined(GTEST_HAS_STD_STRING)
        -:  509:
        -:  510:#ifndef GTEST_HAS_GLOBAL_STRING
        -:  511:// The user didn't tell us whether ::string is available, so we need
        -:  512:// to figure it out.
        -:  513:
        -:  514:# define GTEST_HAS_GLOBAL_STRING 0
        -:  515:
        -:  516:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  517:
        -:  518:#ifndef GTEST_HAS_STD_WSTRING
        -:  519:// The user didn't tell us whether ::std::wstring is available, so we need
        -:  520:// to figure it out.
        -:  521:// TODO(wan@google.com): uses autoconf to detect whether ::std::wstring
        -:  522://   is available.
        -:  523:
        -:  524:// Cygwin 1.7 and below doesn't support ::std::wstring.
        -:  525:// Solaris' libc++ doesn't support it either.  Android has
        -:  526:// no support for it at least as recent as Froyo (2.2).
        -:  527:# define GTEST_HAS_STD_WSTRING \
        -:  528:    (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS))
        -:  529:
        -:  530:#endif  // GTEST_HAS_STD_WSTRING
        -:  531:
        -:  532:#ifndef GTEST_HAS_GLOBAL_WSTRING
        -:  533:// The user didn't tell us whether ::wstring is available, so we need
        -:  534:// to figure it out.
        -:  535:# define GTEST_HAS_GLOBAL_WSTRING \
        -:  536:    (GTEST_HAS_STD_WSTRING && GTEST_HAS_GLOBAL_STRING)
        -:  537:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  538:
        -:  539:// Determines whether RTTI is available.
        -:  540:#ifndef GTEST_HAS_RTTI
        -:  541:// The user didn't tell us whether RTTI is enabled, so we need to
        -:  542:// figure it out.
        -:  543:
        -:  544:# ifdef _MSC_VER
        -:  545:
        -:  546:#  ifdef _CPPRTTI  // MSVC defines this macro iff RTTI is enabled.
        -:  547:#   define GTEST_HAS_RTTI 1
        -:  548:#  else
        -:  549:#   define GTEST_HAS_RTTI 0
        -:  550:#  endif
        -:  551:
        -:  552:// Starting with version 4.3.2, gcc defines __GXX_RTTI iff RTTI is enabled.
        -:  553:# elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40302)
        -:  554:
        -:  555:#  ifdef __GXX_RTTI
        -:  556:// When building against STLport with the Android NDK and with
        -:  557:// -frtti -fno-exceptions, the build fails at link time with undefined
        -:  558:// references to __cxa_bad_typeid. Note sure if STL or toolchain bug,
        -:  559:// so disable RTTI when detected.
        -:  560:#   if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && \
        -:  561:       !defined(__EXCEPTIONS)
        -:  562:#    define GTEST_HAS_RTTI 0
        -:  563:#   else
        -:  564:#    define GTEST_HAS_RTTI 1
        -:  565:#   endif  // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS
        -:  566:#  else
        -:  567:#   define GTEST_HAS_RTTI 0
        -:  568:#  endif  // __GXX_RTTI
        -:  569:
        -:  570:// Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends
        -:  571:// using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the
        -:  572:// first version with C++ support.
        -:  573:# elif defined(__clang__)
        -:  574:
        -:  575:#  define GTEST_HAS_RTTI __has_feature(cxx_rtti)
        -:  576:
        -:  577:// Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if
        -:  578:// both the typeid and dynamic_cast features are present.
        -:  579:# elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)
        -:  580:
        -:  581:#  ifdef __RTTI_ALL__
        -:  582:#   define GTEST_HAS_RTTI 1
        -:  583:#  else
        -:  584:#   define GTEST_HAS_RTTI 0
        -:  585:#  endif
        -:  586:
        -:  587:# else
        -:  588:
        -:  589:// For all other compilers, we assume RTTI is enabled.
        -:  590:#  define GTEST_HAS_RTTI 1
        -:  591:
        -:  592:# endif  // _MSC_VER
        -:  593:
        -:  594:#endif  // GTEST_HAS_RTTI
        -:  595:
        -:  596:// It's this header's responsibility to #include <typeinfo> when RTTI
        -:  597:// is enabled.
        -:  598:#if GTEST_HAS_RTTI
        -:  599:# include <typeinfo>
        -:  600:#endif
        -:  601:
        -:  602:// Determines whether Google Test can use the pthreads library.
        -:  603:#ifndef GTEST_HAS_PTHREAD
        -:  604:// The user didn't tell us explicitly, so we make reasonable assumptions about
        -:  605:// which platforms have pthreads support.
        -:  606://
        -:  607:// To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
        -:  608:// to your compiler flags.
        -:  609:# define GTEST_HAS_PTHREAD (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX \
        -:  610:    || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL)
        -:  611:#endif  // GTEST_HAS_PTHREAD
        -:  612:
        -:  613:#if GTEST_HAS_PTHREAD
        -:  614:// gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is
        -:  615:// true.
        -:  616:# include <pthread.h>  // NOLINT
        -:  617:
        -:  618:// For timespec and nanosleep, used below.
        -:  619:# include <time.h>  // NOLINT
        -:  620:#endif
        -:  621:
        -:  622:// Determines if hash_map/hash_set are available.
        -:  623:// Only used for testing against those containers.
        -:  624:#if !defined(GTEST_HAS_HASH_MAP_)
        -:  625:# if _MSC_VER
        -:  626:#  define GTEST_HAS_HASH_MAP_ 1  // Indicates that hash_map is available.
        -:  627:#  define GTEST_HAS_HASH_SET_ 1  // Indicates that hash_set is available.
        -:  628:# endif  // _MSC_VER
        -:  629:#endif  // !defined(GTEST_HAS_HASH_MAP_)
        -:  630:
        -:  631:// Determines whether Google Test can use tr1/tuple.  You can define
        -:  632:// this macro to 0 to prevent Google Test from using tuple (any
        -:  633:// feature depending on tuple with be disabled in this mode).
        -:  634:#ifndef GTEST_HAS_TR1_TUPLE
        -:  635:# if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR)
        -:  636:// STLport, provided with the Android NDK, has neither <tr1/tuple> or <tuple>.
        -:  637:#  define GTEST_HAS_TR1_TUPLE 0
        -:  638:# else
        -:  639:// The user didn't tell us not to do it, so we assume it's OK.
        -:  640:#  define GTEST_HAS_TR1_TUPLE 1
        -:  641:# endif
        -:  642:#endif  // GTEST_HAS_TR1_TUPLE
        -:  643:
        -:  644:// Determines whether Google Test's own tr1 tuple implementation
        -:  645:// should be used.
        -:  646:#ifndef GTEST_USE_OWN_TR1_TUPLE
        -:  647:// The user didn't tell us, so we need to figure it out.
        -:  648:
        -:  649:// We use our own TR1 tuple if we aren't sure the user has an
        -:  650:// implementation of it already.  At this time, libstdc++ 4.0.0+ and
        -:  651:// MSVC 2010 are the only mainstream standard libraries that come
        -:  652:// with a TR1 tuple implementation.  NVIDIA's CUDA NVCC compiler
        -:  653:// pretends to be GCC by defining __GNUC__ and friends, but cannot
        -:  654:// compile GCC's tuple implementation.  MSVC 2008 (9.0) provides TR1
        -:  655:// tuple in a 323 MB Feature Pack download, which we cannot assume the
        -:  656:// user has.  QNX's QCC compiler is a modified GCC but it doesn't
        -:  657:// support TR1 tuple.  libc++ only provides std::tuple, in C++11 mode,
        -:  658:// and it can be used with some compilers that define __GNUC__.
        -:  659:# if (defined(__GNUC__) && !defined(__CUDACC__) && (GTEST_GCC_VER_ >= 40000) \
        -:  660:      && !GTEST_OS_QNX && !defined(_LIBCPP_VERSION)) || _MSC_VER >= 1600
        -:  661:#  define GTEST_ENV_HAS_TR1_TUPLE_ 1
        -:  662:# endif
        -:  663:
        -:  664:// C++11 specifies that <tuple> provides std::tuple. Use that if gtest is used
        -:  665:// in C++11 mode and libstdc++ isn't very old (binaries targeting OS X 10.6
        -:  666:// can build with clang but need to use gcc4.2's libstdc++).
        -:  667:# if GTEST_LANG_CXX11 && (!defined(__GLIBCXX__) || __GLIBCXX__ > 20110325)
        -:  668:#  define GTEST_ENV_HAS_STD_TUPLE_ 1
        -:  669:# endif
        -:  670:
        -:  671:# if GTEST_ENV_HAS_TR1_TUPLE_ || GTEST_ENV_HAS_STD_TUPLE_
        -:  672:#  define GTEST_USE_OWN_TR1_TUPLE 0
        -:  673:# else
        -:  674:#  define GTEST_USE_OWN_TR1_TUPLE 1
        -:  675:# endif
        -:  676:
        -:  677:#endif  // GTEST_USE_OWN_TR1_TUPLE
        -:  678:
        -:  679:// To avoid conditional compilation everywhere, we make it
        -:  680:// gtest-port.h's responsibility to #include the header implementing
        -:  681:// tuple.
        -:  682:#if GTEST_HAS_STD_TUPLE_
        -:  683:# include <tuple>  // IWYU pragma: export
        -:  684:# define GTEST_TUPLE_NAMESPACE_ ::std
        -:  685:#endif  // GTEST_HAS_STD_TUPLE_
        -:  686:
        -:  687:// We include tr1::tuple even if std::tuple is available to define printers for
        -:  688:// them.
        -:  689:#if GTEST_HAS_TR1_TUPLE
        -:  690:# ifndef GTEST_TUPLE_NAMESPACE_
        -:  691:#  define GTEST_TUPLE_NAMESPACE_ ::std::tr1
        -:  692:# endif  // GTEST_TUPLE_NAMESPACE_
        -:  693:
        -:  694:# if GTEST_USE_OWN_TR1_TUPLE
        -:  695:#  include "gtest/internal/gtest-tuple.h"  // IWYU pragma: export  // NOLINT
        -:  696:# elif GTEST_ENV_HAS_STD_TUPLE_
        -:  697:#  include <tuple>
        -:  698:// C++11 puts its tuple into the ::std namespace rather than
        -:  699:// ::std::tr1.  gtest expects tuple to live in ::std::tr1, so put it there.
        -:  700:// This causes undefined behavior, but supported compilers react in
        -:  701:// the way we intend.
        -:  702:namespace std {
        -:  703:namespace tr1 {
        -:  704:using ::std::get;
        -:  705:using ::std::make_tuple;
        -:  706:using ::std::tuple;
        -:  707:using ::std::tuple_element;
        -:  708:using ::std::tuple_size;
        -:  709:}
        -:  710:}
        -:  711:
        -:  712:# elif GTEST_OS_SYMBIAN
        -:  713:
        -:  714:// On Symbian, BOOST_HAS_TR1_TUPLE causes Boost's TR1 tuple library to
        -:  715:// use STLport's tuple implementation, which unfortunately doesn't
        -:  716:// work as the copy of STLport distributed with Symbian is incomplete.
        -:  717:// By making sure BOOST_HAS_TR1_TUPLE is undefined, we force Boost to
        -:  718:// use its own tuple implementation.
        -:  719:#  ifdef BOOST_HAS_TR1_TUPLE
        -:  720:#   undef BOOST_HAS_TR1_TUPLE
        -:  721:#  endif  // BOOST_HAS_TR1_TUPLE
        -:  722:
        -:  723:// This prevents <boost/tr1/detail/config.hpp>, which defines
        -:  724:// BOOST_HAS_TR1_TUPLE, from being #included by Boost's <tuple>.
        -:  725:#  define BOOST_TR1_DETAIL_CONFIG_HPP_INCLUDED
        -:  726:#  include <tuple>  // IWYU pragma: export  // NOLINT
        -:  727:
        -:  728:# elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40000)
        -:  729:// GCC 4.0+ implements tr1/tuple in the <tr1/tuple> header.  This does
        -:  730:// not conform to the TR1 spec, which requires the header to be <tuple>.
        -:  731:
        -:  732:#  if !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302
        -:  733:// Until version 4.3.2, gcc has a bug that causes <tr1/functional>,
        -:  734:// which is #included by <tr1/tuple>, to not compile when RTTI is
        -:  735:// disabled.  _TR1_FUNCTIONAL is the header guard for
        -:  736:// <tr1/functional>.  Hence the following #define is a hack to prevent
        -:  737:// <tr1/functional> from being included.
        -:  738:#   define _TR1_FUNCTIONAL 1
        -:  739:#   include <tr1/tuple>
        -:  740:#   undef _TR1_FUNCTIONAL  // Allows the user to #include
        -:  741:                        // <tr1/functional> if he chooses to.
        -:  742:#  else
        -:  743:#   include <tr1/tuple>  // NOLINT
        -:  744:#  endif  // !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302
        -:  745:
        -:  746:# else
        -:  747:// If the compiler is not GCC 4.0+, we assume the user is using a
        -:  748:// spec-conforming TR1 implementation.
        -:  749:#  include <tuple>  // IWYU pragma: export  // NOLINT
        -:  750:# endif  // GTEST_USE_OWN_TR1_TUPLE
        -:  751:
        -:  752:#endif  // GTEST_HAS_TR1_TUPLE
        -:  753:
        -:  754:// Determines whether clone(2) is supported.
        -:  755:// Usually it will only be available on Linux, excluding
        -:  756:// Linux on the Itanium architecture.
        -:  757:// Also see http://linux.die.net/man/2/clone.
        -:  758:#ifndef GTEST_HAS_CLONE
        -:  759:// The user didn't tell us, so we need to figure it out.
        -:  760:
        -:  761:# if GTEST_OS_LINUX && !defined(__ia64__)
        -:  762:#  if GTEST_OS_LINUX_ANDROID
        -:  763:// On Android, clone() became available at different API levels for each 32-bit
        -:  764:// architecture.
        -:  765:#    if defined(__LP64__) || \
        -:  766:        (defined(__arm__) && __ANDROID_API__ >= 9) || \
        -:  767:        (defined(__mips__) && __ANDROID_API__ >= 12) || \
        -:  768:        (defined(__i386__) && __ANDROID_API__ >= 17)
        -:  769:#     define GTEST_HAS_CLONE 1
        -:  770:#    else
        -:  771:#     define GTEST_HAS_CLONE 0
        -:  772:#    endif
        -:  773:#  else
        -:  774:#   define GTEST_HAS_CLONE 1
        -:  775:#  endif
        -:  776:# else
        -:  777:#  define GTEST_HAS_CLONE 0
        -:  778:# endif  // GTEST_OS_LINUX && !defined(__ia64__)
        -:  779:
        -:  780:#endif  // GTEST_HAS_CLONE
        -:  781:
        -:  782:// Determines whether to support stream redirection. This is used to test
        -:  783:// output correctness and to implement death tests.
        -:  784:#ifndef GTEST_HAS_STREAM_REDIRECTION
        -:  785:// By default, we assume that stream redirection is supported on all
        -:  786:// platforms except known mobile ones.
        -:  787:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || \
        -:  788:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT
        -:  789:#  define GTEST_HAS_STREAM_REDIRECTION 0
        -:  790:# else
        -:  791:#  define GTEST_HAS_STREAM_REDIRECTION 1
        -:  792:# endif  // !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_SYMBIAN
        -:  793:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -:  794:
        -:  795:// Determines whether to support death tests.
        -:  796:// Google Test does not support death tests for VC 7.1 and earlier as
        -:  797:// abort() in a VC 7.1 application compiled as GUI in debug config
        -:  798:// pops up a dialog window that cannot be suppressed programmatically.
        -:  799:#if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \
        -:  800:     (GTEST_OS_MAC && !GTEST_OS_IOS) || \
        -:  801:     (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || \
        -:  802:     GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \
        -:  803:     GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD)
        -:  804:# define GTEST_HAS_DEATH_TEST 1
        -:  805:#endif
        -:  806:
        -:  807:// We don't support MSVC 7.1 with exceptions disabled now.  Therefore
        -:  808:// all the compilers we care about are adequate for supporting
        -:  809:// value-parameterized tests.
        -:  810:#define GTEST_HAS_PARAM_TEST 1
        -:  811:
        -:  812:// Determines whether to support type-driven tests.
        -:  813:
        -:  814:// Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,
        -:  815:// Sun Pro CC, IBM Visual Age, and HP aCC support.
        -:  816:#if defined(__GNUC__) || (_MSC_VER >= 1400) || defined(__SUNPRO_CC) || \
        -:  817:    defined(__IBMCPP__) || defined(__HP_aCC)
        -:  818:# define GTEST_HAS_TYPED_TEST 1
        -:  819:# define GTEST_HAS_TYPED_TEST_P 1
        -:  820:#endif
        -:  821:
        -:  822:// Determines whether to support Combine(). This only makes sense when
        -:  823:// value-parameterized tests are enabled.  The implementation doesn't
        -:  824:// work on Sun Studio since it doesn't understand templated conversion
        -:  825:// operators.
        -:  826:#if GTEST_HAS_PARAM_TEST && GTEST_HAS_TR1_TUPLE && !defined(__SUNPRO_CC)
        -:  827:# define GTEST_HAS_COMBINE 1
        -:  828:#endif
        -:  829:
        -:  830:// Determines whether the system compiler uses UTF-16 for encoding wide strings.
        -:  831:#define GTEST_WIDE_STRING_USES_UTF16_ \
        -:  832:    (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_SYMBIAN || GTEST_OS_AIX)
        -:  833:
        -:  834:// Determines whether test results can be streamed to a socket.
        -:  835:#if GTEST_OS_LINUX
        -:  836:# define GTEST_CAN_STREAM_RESULTS_ 1
        -:  837:#endif
        -:  838:
        -:  839:// Defines some utility macros.
        -:  840:
        -:  841:// The GNU compiler emits a warning if nested "if" statements are followed by
        -:  842:// an "else" statement and braces are not used to explicitly disambiguate the
        -:  843:// "else" binding.  This leads to problems with code like:
        -:  844://
        -:  845://   if (gate)
        -:  846://     ASSERT_*(condition) << "Some message";
        -:  847://
        -:  848:// The "switch (0) case 0:" idiom is used to suppress this.
        -:  849:#ifdef __INTEL_COMPILER
        -:  850:# define GTEST_AMBIGUOUS_ELSE_BLOCKER_
        -:  851:#else
        -:  852:# define GTEST_AMBIGUOUS_ELSE_BLOCKER_ switch (0) case 0: default:  // NOLINT
        -:  853:#endif
        -:  854:
        -:  855:// Use this annotation at the end of a struct/class definition to
        -:  856:// prevent the compiler from optimizing away instances that are never
        -:  857:// used.  This is useful when all interesting logic happens inside the
        -:  858:// c'tor and / or d'tor.  Example:
        -:  859://
        -:  860://   struct Foo {
        -:  861://     Foo() { ... }
        -:  862://   } GTEST_ATTRIBUTE_UNUSED_;
        -:  863://
        -:  864:// Also use it after a variable or parameter declaration to tell the
        -:  865:// compiler the variable/parameter does not have to be used.
        -:  866:#if defined(__GNUC__) && !defined(COMPILER_ICC)
        -:  867:# define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))
        -:  868:#elif defined(__clang__)
        -:  869:# if __has_attribute(unused)
        -:  870:#  define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))
        -:  871:# endif
        -:  872:#endif
        -:  873:#ifndef GTEST_ATTRIBUTE_UNUSED_
        -:  874:# define GTEST_ATTRIBUTE_UNUSED_
        -:  875:#endif
        -:  876:
        -:  877:// A macro to disallow operator=
        -:  878:// This should be used in the private: declarations for a class.
        -:  879:#define GTEST_DISALLOW_ASSIGN_(type)\
        -:  880:  void operator=(type const &)
        -:  881:
        -:  882:// A macro to disallow copy constructor and operator=
        -:  883:// This should be used in the private: declarations for a class.
        -:  884:#define GTEST_DISALLOW_COPY_AND_ASSIGN_(type)\
        -:  885:  type(type const &);\
        -:  886:  GTEST_DISALLOW_ASSIGN_(type)
        -:  887:
        -:  888:// Tell the compiler to warn about unused return values for functions declared
        -:  889:// with this macro.  The macro should be used on function declarations
        -:  890:// following the argument list:
        -:  891://
        -:  892://   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;
        -:  893:#if defined(__GNUC__) && (GTEST_GCC_VER_ >= 30400) && !defined(COMPILER_ICC)
        -:  894:# define GTEST_MUST_USE_RESULT_ __attribute__ ((warn_unused_result))
        -:  895:#else
        -:  896:# define GTEST_MUST_USE_RESULT_
        -:  897:#endif  // __GNUC__ && (GTEST_GCC_VER_ >= 30400) && !COMPILER_ICC
        -:  898:
        -:  899:// MS C++ compiler emits warning when a conditional expression is compile time
        -:  900:// constant. In some contexts this warning is false positive and needs to be
        -:  901:// suppressed. Use the following two macros in such cases:
        -:  902://
        -:  903:// GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -:  904:// while (true) {
        -:  905:// GTEST_INTENTIONAL_CONST_COND_POP_()
        -:  906:// }
        -:  907:# define GTEST_INTENTIONAL_CONST_COND_PUSH_() \
        -:  908:    GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)
        -:  909:# define GTEST_INTENTIONAL_CONST_COND_POP_() \
        -:  910:    GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  911:
        -:  912:// Determine whether the compiler supports Microsoft's Structured Exception
        -:  913:// Handling.  This is supported by several Windows compilers but generally
        -:  914:// does not exist on any other system.
        -:  915:#ifndef GTEST_HAS_SEH
        -:  916:// The user didn't tell us, so we need to figure it out.
        -:  917:
        -:  918:# if defined(_MSC_VER) || defined(__BORLANDC__)
        -:  919:// These two compilers are known to support SEH.
        -:  920:#  define GTEST_HAS_SEH 1
        -:  921:# else
        -:  922:// Assume no SEH.
        -:  923:#  define GTEST_HAS_SEH 0
        -:  924:# endif
        -:  925:
        -:  926:#define GTEST_IS_THREADSAFE \
        -:  927:    (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ \
        -:  928:     || (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) \
        -:  929:     || GTEST_HAS_PTHREAD)
        -:  930:
        -:  931:#endif  // GTEST_HAS_SEH
        -:  932:
        -:  933:#ifdef _MSC_VER
        -:  934:# if GTEST_LINKED_AS_SHARED_LIBRARY
        -:  935:#  define GTEST_API_ __declspec(dllimport)
        -:  936:# elif GTEST_CREATE_SHARED_LIBRARY
        -:  937:#  define GTEST_API_ __declspec(dllexport)
        -:  938:# endif
        -:  939:#elif __GNUC__ >= 4 || defined(__clang__)
        -:  940:# define GTEST_API_ __attribute__((visibility ("default")))
        -:  941:#endif // _MSC_VER
        -:  942:
        -:  943:#ifndef GTEST_API_
        -:  944:# define GTEST_API_
        -:  945:#endif
        -:  946:
        -:  947:#ifdef __GNUC__
        -:  948:// Ask the compiler to never inline a given function.
        -:  949:# define GTEST_NO_INLINE_ __attribute__((noinline))
        -:  950:#else
        -:  951:# define GTEST_NO_INLINE_
        -:  952:#endif
        -:  953:
        -:  954:// _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.
        -:  955:#if defined(__GLIBCXX__) || defined(_LIBCPP_VERSION)
        -:  956:# define GTEST_HAS_CXXABI_H_ 1
        -:  957:#else
        -:  958:# define GTEST_HAS_CXXABI_H_ 0
        -:  959:#endif
        -:  960:
        -:  961:// A function level attribute to disable checking for use of uninitialized
        -:  962:// memory when built with MemorySanitizer.
        -:  963:#if defined(__clang__)
        -:  964:# if __has_feature(memory_sanitizer)
        -:  965:#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ \
        -:  966:       __attribute__((no_sanitize_memory))
        -:  967:# else
        -:  968:#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  969:# endif  // __has_feature(memory_sanitizer)
        -:  970:#else
        -:  971:# define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  972:#endif  // __clang__
        -:  973:
        -:  974:// A function level attribute to disable AddressSanitizer instrumentation.
        -:  975:#if defined(__clang__)
        -:  976:# if __has_feature(address_sanitizer)
        -:  977:#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \
        -:  978:       __attribute__((no_sanitize_address))
        -:  979:# else
        -:  980:#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  981:# endif  // __has_feature(address_sanitizer)
        -:  982:#else
        -:  983:# define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  984:#endif  // __clang__
        -:  985:
        -:  986:// A function level attribute to disable ThreadSanitizer instrumentation.
        -:  987:#if defined(__clang__)
        -:  988:# if __has_feature(thread_sanitizer)
        -:  989:#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ \
        -:  990:       __attribute__((no_sanitize_thread))
        -:  991:# else
        -:  992:#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
        -:  993:# endif  // __has_feature(thread_sanitizer)
        -:  994:#else
        -:  995:# define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
        -:  996:#endif  // __clang__
        -:  997:
        -:  998:namespace testing {
        -:  999:
        -: 1000:class Message;
        -: 1001:
        -: 1002:#if defined(GTEST_TUPLE_NAMESPACE_)
        -: 1003:// Import tuple and friends into the ::testing namespace.
        -: 1004:// It is part of our interface, having them in ::testing allows us to change
        -: 1005:// their types as needed.
        -: 1006:using GTEST_TUPLE_NAMESPACE_::get;
        -: 1007:using GTEST_TUPLE_NAMESPACE_::make_tuple;
        -: 1008:using GTEST_TUPLE_NAMESPACE_::tuple;
        -: 1009:using GTEST_TUPLE_NAMESPACE_::tuple_size;
        -: 1010:using GTEST_TUPLE_NAMESPACE_::tuple_element;
        -: 1011:#endif  // defined(GTEST_TUPLE_NAMESPACE_)
        -: 1012:
        -: 1013:namespace internal {
        -: 1014:
        -: 1015:// A secret type that Google Test users don't know about.  It has no
        -: 1016:// definition on purpose.  Therefore it's impossible to create a
        -: 1017:// Secret object, which is what we want.
        -: 1018:class Secret;
        -: 1019:
        -: 1020:// The GTEST_COMPILE_ASSERT_ macro can be used to verify that a compile time
        -: 1021:// expression is true. For example, you could use it to verify the
        -: 1022:// size of a static array:
        -: 1023://
        -: 1024://   GTEST_COMPILE_ASSERT_(GTEST_ARRAY_SIZE_(names) == NUM_NAMES,
        -: 1025://                         names_incorrect_size);
        -: 1026://
        -: 1027:// or to make sure a struct is smaller than a certain size:
        -: 1028://
        -: 1029://   GTEST_COMPILE_ASSERT_(sizeof(foo) < 128, foo_too_large);
        -: 1030://
        -: 1031:// The second argument to the macro is the name of the variable. If
        -: 1032:// the expression is false, most compilers will issue a warning/error
        -: 1033:// containing the name of the variable.
        -: 1034:
        -: 1035:#if GTEST_LANG_CXX11
        -: 1036:# define GTEST_COMPILE_ASSERT_(expr, msg) static_assert(expr, #msg)
        -: 1037:#else  // !GTEST_LANG_CXX11
        -: 1038:template <bool>
        -: 1039:  struct CompileAssert {
        -: 1040:};
        -: 1041:
        -: 1042:# define GTEST_COMPILE_ASSERT_(expr, msg) \
        -: 1043:  typedef ::testing::internal::CompileAssert<(static_cast<bool>(expr))> \
        -: 1044:      msg[static_cast<bool>(expr) ? 1 : -1] GTEST_ATTRIBUTE_UNUSED_
        -: 1045:#endif  // !GTEST_LANG_CXX11
        -: 1046:
        -: 1047:// Implementation details of GTEST_COMPILE_ASSERT_:
        -: 1048://
        -: 1049:// (In C++11, we simply use static_assert instead of the following)
        -: 1050://
        -: 1051:// - GTEST_COMPILE_ASSERT_ works by defining an array type that has -1
        -: 1052://   elements (and thus is invalid) when the expression is false.
        -: 1053://
        -: 1054:// - The simpler definition
        -: 1055://
        -: 1056://    #define GTEST_COMPILE_ASSERT_(expr, msg) typedef char msg[(expr) ? 1 : -1]
        -: 1057://
        -: 1058://   does not work, as gcc supports variable-length arrays whose sizes
        -: 1059://   are determined at run-time (this is gcc's extension and not part
        -: 1060://   of the C++ standard).  As a result, gcc fails to reject the
        -: 1061://   following code with the simple definition:
        -: 1062://
        -: 1063://     int foo;
        -: 1064://     GTEST_COMPILE_ASSERT_(foo, msg); // not supposed to compile as foo is
        -: 1065://                                      // not a compile-time constant.
        -: 1066://
        -: 1067:// - By using the type CompileAssert<(bool(expr))>, we ensures that
        -: 1068://   expr is a compile-time constant.  (Template arguments must be
        -: 1069://   determined at compile-time.)
        -: 1070://
        -: 1071:// - The outter parentheses in CompileAssert<(bool(expr))> are necessary
        -: 1072://   to work around a bug in gcc 3.4.4 and 4.0.1.  If we had written
        -: 1073://
        -: 1074://     CompileAssert<bool(expr)>
        -: 1075://
        -: 1076://   instead, these compilers will refuse to compile
        -: 1077://
        -: 1078://     GTEST_COMPILE_ASSERT_(5 > 0, some_message);
        -: 1079://
        -: 1080://   (They seem to think the ">" in "5 > 0" marks the end of the
        -: 1081://   template argument list.)
        -: 1082://
        -: 1083:// - The array size is (bool(expr) ? 1 : -1), instead of simply
        -: 1084://
        -: 1085://     ((expr) ? 1 : -1).
        -: 1086://
        -: 1087://   This is to avoid running into a bug in MS VC 7.1, which
        -: 1088://   causes ((0.0) ? 1 : -1) to incorrectly evaluate to 1.
        -: 1089:
        -: 1090:// StaticAssertTypeEqHelper is used by StaticAssertTypeEq defined in gtest.h.
        -: 1091://
        -: 1092:// This template is declared, but intentionally undefined.
        -: 1093:template <typename T1, typename T2>
        -: 1094:struct StaticAssertTypeEqHelper;
        -: 1095:
        -: 1096:template <typename T>
        -: 1097:struct StaticAssertTypeEqHelper<T, T> {
        -: 1098:  enum { value = true };
        -: 1099:};
        -: 1100:
        -: 1101:// Evaluates to the number of elements in 'array'.
        -: 1102:#define GTEST_ARRAY_SIZE_(array) (sizeof(array) / sizeof(array[0]))
        -: 1103:
        -: 1104:#if GTEST_HAS_GLOBAL_STRING
        -: 1105:typedef ::string string;
        -: 1106:#else
        -: 1107:typedef ::std::string string;
        -: 1108:#endif  // GTEST_HAS_GLOBAL_STRING
        -: 1109:
        -: 1110:#if GTEST_HAS_GLOBAL_WSTRING
        -: 1111:typedef ::wstring wstring;
        -: 1112:#elif GTEST_HAS_STD_WSTRING
        -: 1113:typedef ::std::wstring wstring;
        -: 1114:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -: 1115:
        -: 1116:// A helper for suppressing warnings on constant condition.  It just
        -: 1117:// returns 'condition'.
        -: 1118:GTEST_API_ bool IsTrue(bool condition);
        -: 1119:
        -: 1120:// Defines scoped_ptr.
        -: 1121:
        -: 1122:// This implementation of scoped_ptr is PARTIAL - it only contains
        -: 1123:// enough stuff to satisfy Google Test's need.
        -: 1124:template <typename T>
        -: 1125:class scoped_ptr {
        -: 1126: public:
        -: 1127:  typedef T element_type;
        -: 1128:
        -: 1129:  explicit scoped_ptr(T* p = NULL) : ptr_(p) {}
       46: 1130:  ~scoped_ptr() { reset(); }
        -: 1131:
        -: 1132:  T& operator*() const { return *ptr_; }
    #####: 1133:  T* operator->() const { return ptr_; }
    #####: 1134:  T* get() const { return ptr_; }
        -: 1135:
        -: 1136:  T* release() {
        -: 1137:    T* const ptr = ptr_;
        -: 1138:    ptr_ = NULL;
        -: 1139:    return ptr;
        -: 1140:  }
        -: 1141:
       46: 1142:  void reset(T* p = NULL) {
       46: 1143:    if (p != ptr_) {
       44: 1144:      if (IsTrue(sizeof(T) > 0)) {  // Makes sure T is a complete type.
       44: 1145:        delete ptr_;
        -: 1146:      }
       44: 1147:      ptr_ = p;
        -: 1148:    }
       46: 1149:  }
        -: 1150:
        -: 1151:  friend void swap(scoped_ptr& a, scoped_ptr& b) {
        -: 1152:    using std::swap;
        -: 1153:    swap(a.ptr_, b.ptr_);
        -: 1154:  }
        -: 1155:
        -: 1156: private:
        -: 1157:  T* ptr_;
        -: 1158:
        -: 1159:  GTEST_DISALLOW_COPY_AND_ASSIGN_(scoped_ptr);
        -: 1160:};
        -: 1161:
        -: 1162:// Defines RE.
        -: 1163:
        -: 1164:// A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended
        -: 1165:// Regular Expression syntax.
        -: 1166:class GTEST_API_ RE {
        -: 1167: public:
        -: 1168:  // A copy constructor is required by the Standard to initialize object
        -: 1169:  // references from r-values.
        -: 1170:  RE(const RE& other) { Init(other.pattern()); }
        -: 1171:
        -: 1172:  // Constructs an RE from a string.
        -: 1173:  RE(const ::std::string& regex) { Init(regex.c_str()); }  // NOLINT
        -: 1174:
        -: 1175:#if GTEST_HAS_GLOBAL_STRING
        -: 1176:
        -: 1177:  RE(const ::string& regex) { Init(regex.c_str()); }  // NOLINT
        -: 1178:
        -: 1179:#endif  // GTEST_HAS_GLOBAL_STRING
        -: 1180:
        -: 1181:  RE(const char* regex) { Init(regex); }  // NOLINT
        -: 1182:  ~RE();
        -: 1183:
        -: 1184:  // Returns the string representation of the regex.
        -: 1185:  const char* pattern() const { return pattern_; }
        -: 1186:
        -: 1187:  // FullMatch(str, re) returns true iff regular expression re matches
        -: 1188:  // the entire str.
        -: 1189:  // PartialMatch(str, re) returns true iff regular expression re
        -: 1190:  // matches a substring of str (including str itself).
        -: 1191:  //
        -: 1192:  // TODO(wan@google.com): make FullMatch() and PartialMatch() work
        -: 1193:  // when str contains NUL characters.
        -: 1194:  static bool FullMatch(const ::std::string& str, const RE& re) {
        -: 1195:    return FullMatch(str.c_str(), re);
        -: 1196:  }
        -: 1197:  static bool PartialMatch(const ::std::string& str, const RE& re) {
        -: 1198:    return PartialMatch(str.c_str(), re);
        -: 1199:  }
        -: 1200:
        -: 1201:#if GTEST_HAS_GLOBAL_STRING
        -: 1202:
        -: 1203:  static bool FullMatch(const ::string& str, const RE& re) {
        -: 1204:    return FullMatch(str.c_str(), re);
        -: 1205:  }
        -: 1206:  static bool PartialMatch(const ::string& str, const RE& re) {
        -: 1207:    return PartialMatch(str.c_str(), re);
        -: 1208:  }
        -: 1209:
        -: 1210:#endif  // GTEST_HAS_GLOBAL_STRING
        -: 1211:
        -: 1212:  static bool FullMatch(const char* str, const RE& re);
        -: 1213:  static bool PartialMatch(const char* str, const RE& re);
        -: 1214:
        -: 1215: private:
        -: 1216:  void Init(const char* regex);
        -: 1217:
        -: 1218:  // We use a const char* instead of an std::string, as Google Test used to be
        -: 1219:  // used where std::string is not available.  TODO(wan@google.com): change to
        -: 1220:  // std::string.
        -: 1221:  const char* pattern_;
        -: 1222:  bool is_valid_;
        -: 1223:
        -: 1224:#if GTEST_USES_POSIX_RE
        -: 1225:
        -: 1226:  regex_t full_regex_;     // For FullMatch().
        -: 1227:  regex_t partial_regex_;  // For PartialMatch().
        -: 1228:
        -: 1229:#else  // GTEST_USES_SIMPLE_RE
        -: 1230:
        -: 1231:  const char* full_pattern_;  // For FullMatch();
        -: 1232:
        -: 1233:#endif
        -: 1234:
        -: 1235:  GTEST_DISALLOW_ASSIGN_(RE);
        -: 1236:};
        -: 1237:
        -: 1238:// Formats a source file path and a line number as they would appear
        -: 1239:// in an error message from the compiler used to compile this code.
        -: 1240:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line);
        -: 1241:
        -: 1242:// Formats a file location for compiler-independent XML output.
        -: 1243:// Although this function is not platform dependent, we put it next to
        -: 1244:// FormatFileLocation in order to contrast the two functions.
        -: 1245:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(const char* file,
        -: 1246:                                                               int line);
        -: 1247:
        -: 1248:// Defines logging utilities:
        -: 1249://   GTEST_LOG_(severity) - logs messages at the specified severity level. The
        -: 1250://                          message itself is streamed into the macro.
        -: 1251://   LogToStderr()  - directs all log messages to stderr.
        -: 1252://   FlushInfoLog() - flushes informational log messages.
        -: 1253:
        -: 1254:enum GTestLogSeverity {
        -: 1255:  GTEST_INFO,
        -: 1256:  GTEST_WARNING,
        -: 1257:  GTEST_ERROR,
        -: 1258:  GTEST_FATAL
        -: 1259:};
        -: 1260:
        -: 1261:// Formats log entry severity, provides a stream object for streaming the
        -: 1262:// log message, and terminates the message with a newline when going out of
        -: 1263:// scope.
        -: 1264:class GTEST_API_ GTestLog {
        -: 1265: public:
        -: 1266:  GTestLog(GTestLogSeverity severity, const char* file, int line);
        -: 1267:
        -: 1268:  // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
        -: 1269:  ~GTestLog();
        -: 1270:
        -: 1271:  ::std::ostream& GetStream() { return ::std::cerr; }
        -: 1272:
        -: 1273: private:
        -: 1274:  const GTestLogSeverity severity_;
        -: 1275:
        -: 1276:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestLog);
        -: 1277:};
        -: 1278:
        -: 1279:#if !defined(GTEST_LOG_)
        -: 1280:
        -: 1281:# define GTEST_LOG_(severity) \
        -: 1282:    ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \
        -: 1283:                                  __FILE__, __LINE__).GetStream()
        -: 1284:
        -: 1285:inline void LogToStderr() {}
        -: 1286:inline void FlushInfoLog() { fflush(NULL); }
        -: 1287:
        -: 1288:#endif  // !defined(GTEST_LOG_)
        -: 1289:
        -: 1290:#if !defined(GTEST_CHECK_)
        -: 1291:// INTERNAL IMPLEMENTATION - DO NOT USE.
        -: 1292://
        -: 1293:// GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition
        -: 1294:// is not satisfied.
        -: 1295://  Synopsys:
        -: 1296://    GTEST_CHECK_(boolean_condition);
        -: 1297://     or
        -: 1298://    GTEST_CHECK_(boolean_condition) << "Additional message";
        -: 1299://
        -: 1300://    This checks the condition and if the condition is not satisfied
        -: 1301://    it prints message about the condition violation, including the
        -: 1302://    condition itself, plus additional message streamed into it, if any,
        -: 1303://    and then it aborts the program. It aborts the program irrespective of
        -: 1304://    whether it is built in the debug mode or not.
        -: 1305:# define GTEST_CHECK_(condition) \
        -: 1306:    GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
        -: 1307:    if (::testing::internal::IsTrue(condition)) \
        -: 1308:      ; \
        -: 1309:    else \
        -: 1310:      GTEST_LOG_(FATAL) << "Condition " #condition " failed. "
        -: 1311:#endif  // !defined(GTEST_CHECK_)
        -: 1312:
        -: 1313:// An all-mode assert to verify that the given POSIX-style function
        -: 1314:// call returns 0 (indicating success).  Known limitation: this
        -: 1315:// doesn't expand to a balanced 'if' statement, so enclose the macro
        -: 1316:// in {} if you need to use it as the only statement in an 'if'
        -: 1317:// branch.
        -: 1318:#define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \
        -: 1319:  if (const int gtest_error = (posix_call)) \
        -: 1320:    GTEST_LOG_(FATAL) << #posix_call << "failed with error " \
        -: 1321:                      << gtest_error
        -: 1322:
        -: 1323:#if GTEST_HAS_STD_MOVE_
        -: 1324:using std::move;
        -: 1325:#else  // GTEST_HAS_STD_MOVE_
        -: 1326:template <typename T>
        -: 1327:const T& move(const T& t) {
        -: 1328:  return t;
        -: 1329:}
        -: 1330:#endif  // GTEST_HAS_STD_MOVE_
        -: 1331:
        -: 1332:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
        -: 1333://
        -: 1334:// Use ImplicitCast_ as a safe version of static_cast for upcasting in
        -: 1335:// the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a
        -: 1336:// const Foo*).  When you use ImplicitCast_, the compiler checks that
        -: 1337:// the cast is safe.  Such explicit ImplicitCast_s are necessary in
        -: 1338:// surprisingly many situations where C++ demands an exact type match
        -: 1339:// instead of an argument type convertable to a target type.
        -: 1340://
        -: 1341:// The syntax for using ImplicitCast_ is the same as for static_cast:
        -: 1342://
        -: 1343://   ImplicitCast_<ToType>(expr)
        -: 1344://
        -: 1345:// ImplicitCast_ would have been part of the C++ standard library,
        -: 1346:// but the proposal was submitted too late.  It will probably make
        -: 1347:// its way into the language in the future.
        -: 1348://
        -: 1349:// This relatively ugly name is intentional. It prevents clashes with
        -: 1350:// similar functions users may have (e.g., implicit_cast). The internal
        -: 1351:// namespace alone is not enough because the function can be found by ADL.
        -: 1352:template<typename To>
        -: 1353:inline To ImplicitCast_(To x) { return x; }
        -: 1354:
        -: 1355:// When you upcast (that is, cast a pointer from type Foo to type
        -: 1356:// SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts
        -: 1357:// always succeed.  When you downcast (that is, cast a pointer from
        -: 1358:// type Foo to type SubclassOfFoo), static_cast<> isn't safe, because
        -: 1359:// how do you know the pointer is really of type SubclassOfFoo?  It
        -: 1360:// could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,
        -: 1361:// when you downcast, you should use this macro.  In debug mode, we
        -: 1362:// use dynamic_cast<> to double-check the downcast is legal (we die
        -: 1363:// if it's not).  In normal mode, we do the efficient static_cast<>
        -: 1364:// instead.  Thus, it's important to test in debug mode to make sure
        -: 1365:// the cast is legal!
        -: 1366://    This is the only place in the code we should use dynamic_cast<>.
        -: 1367:// In particular, you SHOULDN'T be using dynamic_cast<> in order to
        -: 1368:// do RTTI (eg code like this:
        -: 1369://    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);
        -: 1370://    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);
        -: 1371:// You should design the code some other way not to need this.
        -: 1372://
        -: 1373:// This relatively ugly name is intentional. It prevents clashes with
        -: 1374:// similar functions users may have (e.g., down_cast). The internal
        -: 1375:// namespace alone is not enough because the function can be found by ADL.
        -: 1376:template<typename To, typename From>  // use like this: DownCast_<T*>(foo);
        -: 1377:inline To DownCast_(From* f) {  // so we only accept pointers
        -: 1378:  // Ensures that To is a sub-type of From *.  This test is here only
        -: 1379:  // for compile-time type checking, and has no overhead in an
        -: 1380:  // optimized build at run-time, as it will be optimized away
        -: 1381:  // completely.
        -: 1382:  GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -: 1383:  if (false) {
        -: 1384:  GTEST_INTENTIONAL_CONST_COND_POP_()
        -: 1385:    const To to = NULL;
        -: 1386:    ::testing::internal::ImplicitCast_<From*>(to);
        -: 1387:  }
        -: 1388:
        -: 1389:#if GTEST_HAS_RTTI
        -: 1390:  // RTTI: debug mode only!
        -: 1391:  GTEST_CHECK_(f == NULL || dynamic_cast<To>(f) != NULL);
        -: 1392:#endif
        -: 1393:  return static_cast<To>(f);
        -: 1394:}
        -: 1395:
        -: 1396:// Downcasts the pointer of type Base to Derived.
        -: 1397:// Derived must be a subclass of Base. The parameter MUST
        -: 1398:// point to a class of type Derived, not any subclass of it.
        -: 1399:// When RTTI is available, the function performs a runtime
        -: 1400:// check to enforce this.
        -: 1401:template <class Derived, class Base>
        -: 1402:Derived* CheckedDowncastToActualType(Base* base) {
        -: 1403:#if GTEST_HAS_RTTI
        -: 1404:  GTEST_CHECK_(typeid(*base) == typeid(Derived));
        -: 1405:#endif
        -: 1406:
        -: 1407:#if GTEST_HAS_DOWNCAST_
        -: 1408:  return ::down_cast<Derived*>(base);
        -: 1409:#elif GTEST_HAS_RTTI
        -: 1410:  return dynamic_cast<Derived*>(base);  // NOLINT
        -: 1411:#else
        -: 1412:  return static_cast<Derived*>(base);  // Poor man's downcast.
        -: 1413:#endif
        -: 1414:}
        -: 1415:
        -: 1416:#if GTEST_HAS_STREAM_REDIRECTION
        -: 1417:
        -: 1418:// Defines the stderr capturer:
        -: 1419://   CaptureStdout     - starts capturing stdout.
        -: 1420://   GetCapturedStdout - stops capturing stdout and returns the captured string.
        -: 1421://   CaptureStderr     - starts capturing stderr.
        -: 1422://   GetCapturedStderr - stops capturing stderr and returns the captured string.
        -: 1423://
        -: 1424:GTEST_API_ void CaptureStdout();
        -: 1425:GTEST_API_ std::string GetCapturedStdout();
        -: 1426:GTEST_API_ void CaptureStderr();
        -: 1427:GTEST_API_ std::string GetCapturedStderr();
        -: 1428:
        -: 1429:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -: 1430:
        -: 1431:// Returns a path to temporary directory.
        -: 1432:GTEST_API_ std::string TempDir();
        -: 1433:
        -: 1434:// Returns the size (in bytes) of a file.
        -: 1435:GTEST_API_ size_t GetFileSize(FILE* file);
        -: 1436:
        -: 1437:// Reads the entire content of a file as a string.
        -: 1438:GTEST_API_ std::string ReadEntireFile(FILE* file);
        -: 1439:
        -: 1440:// All command line arguments.
        -: 1441:GTEST_API_ const ::std::vector<testing::internal::string>& GetArgvs();
        -: 1442:
        -: 1443:#if GTEST_HAS_DEATH_TEST
        -: 1444:
        -: 1445:const ::std::vector<testing::internal::string>& GetInjectableArgvs();
        -: 1446:void SetInjectableArgvs(const ::std::vector<testing::internal::string>*
        -: 1447:                             new_argvs);
        -: 1448:
        -: 1449:
        -: 1450:#endif  // GTEST_HAS_DEATH_TEST
        -: 1451:
        -: 1452:// Defines synchronization primitives.
        -: 1453:#if GTEST_IS_THREADSAFE
        -: 1454:# if GTEST_HAS_PTHREAD
        -: 1455:// Sleeps for (roughly) n milliseconds.  This function is only for testing
        -: 1456:// Google Test's own constructs.  Don't use it in user tests, either
        -: 1457:// directly or indirectly.
        -: 1458:inline void SleepMilliseconds(int n) {
        -: 1459:  const timespec time = {
        -: 1460:    0,                  // 0 seconds.
        -: 1461:    n * 1000L * 1000L,  // And n ms.
        -: 1462:  };
        -: 1463:  nanosleep(&time, NULL);
        -: 1464:}
        -: 1465:# endif  // GTEST_HAS_PTHREAD
        -: 1466:
        -: 1467:# if GTEST_HAS_NOTIFICATION_
        -: 1468:// Notification has already been imported into the namespace.
        -: 1469:// Nothing to do here.
        -: 1470:
        -: 1471:# elif GTEST_HAS_PTHREAD
        -: 1472:// Allows a controller thread to pause execution of newly created
        -: 1473:// threads until notified.  Instances of this class must be created
        -: 1474:// and destroyed in the controller thread.
        -: 1475://
        -: 1476:// This class is only for testing Google Test's own constructs. Do not
        -: 1477:// use it in user tests, either directly or indirectly.
        -: 1478:class Notification {
        -: 1479: public:
        -: 1480:  Notification() : notified_(false) {
        -: 1481:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, NULL));
        -: 1482:  }
        -: 1483:  ~Notification() {
        -: 1484:    pthread_mutex_destroy(&mutex_);
        -: 1485:  }
        -: 1486:
        -: 1487:  // Notifies all threads created with this notification to start. Must
        -: 1488:  // be called from the controller thread.
        -: 1489:  void Notify() {
        -: 1490:    pthread_mutex_lock(&mutex_);
        -: 1491:    notified_ = true;
        -: 1492:    pthread_mutex_unlock(&mutex_);
        -: 1493:  }
        -: 1494:
        -: 1495:  // Blocks until the controller thread notifies. Must be called from a test
        -: 1496:  // thread.
        -: 1497:  void WaitForNotification() {
        -: 1498:    for (;;) {
        -: 1499:      pthread_mutex_lock(&mutex_);
        -: 1500:      const bool notified = notified_;
        -: 1501:      pthread_mutex_unlock(&mutex_);
        -: 1502:      if (notified)
        -: 1503:        break;
        -: 1504:      SleepMilliseconds(10);
        -: 1505:    }
        -: 1506:  }
        -: 1507:
        -: 1508: private:
        -: 1509:  pthread_mutex_t mutex_;
        -: 1510:  bool notified_;
        -: 1511:
        -: 1512:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Notification);
        -: 1513:};
        -: 1514:
        -: 1515:# elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 1516:
        -: 1517:GTEST_API_ void SleepMilliseconds(int n);
        -: 1518:
        -: 1519:// Provides leak-safe Windows kernel handle ownership.
        -: 1520:// Used in death tests and in threading support.
        -: 1521:class GTEST_API_ AutoHandle {
        -: 1522: public:
        -: 1523:  // Assume that Win32 HANDLE type is equivalent to void*. Doing so allows us to
        -: 1524:  // avoid including <windows.h> in this header file. Including <windows.h> is
        -: 1525:  // undesirable because it defines a lot of symbols and macros that tend to
        -: 1526:  // conflict with client code. This assumption is verified by
        -: 1527:  // WindowsTypesTest.HANDLEIsVoidStar.
        -: 1528:  typedef void* Handle;
        -: 1529:  AutoHandle();
        -: 1530:  explicit AutoHandle(Handle handle);
        -: 1531:
        -: 1532:  ~AutoHandle();
        -: 1533:
        -: 1534:  Handle Get() const;
        -: 1535:  void Reset();
        -: 1536:  void Reset(Handle handle);
        -: 1537:
        -: 1538: private:
        -: 1539:  // Returns true iff the handle is a valid handle object that can be closed.
        -: 1540:  bool IsCloseable() const;
        -: 1541:
        -: 1542:  Handle handle_;
        -: 1543:
        -: 1544:  GTEST_DISALLOW_COPY_AND_ASSIGN_(AutoHandle);
        -: 1545:};
        -: 1546:
        -: 1547:// Allows a controller thread to pause execution of newly created
        -: 1548:// threads until notified.  Instances of this class must be created
        -: 1549:// and destroyed in the controller thread.
        -: 1550://
        -: 1551:// This class is only for testing Google Test's own constructs. Do not
        -: 1552:// use it in user tests, either directly or indirectly.
        -: 1553:class GTEST_API_ Notification {
        -: 1554: public:
        -: 1555:  Notification();
        -: 1556:  void Notify();
        -: 1557:  void WaitForNotification();
        -: 1558:
        -: 1559: private:
        -: 1560:  AutoHandle event_;
        -: 1561:
        -: 1562:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Notification);
        -: 1563:};
        -: 1564:# endif  // GTEST_HAS_NOTIFICATION_
        -: 1565:
        -: 1566:// On MinGW, we can have both GTEST_OS_WINDOWS and GTEST_HAS_PTHREAD
        -: 1567:// defined, but we don't want to use MinGW's pthreads implementation, which
        -: 1568:// has conformance problems with some versions of the POSIX standard.
        -: 1569:# if GTEST_HAS_PTHREAD && !GTEST_OS_WINDOWS_MINGW
        -: 1570:
        -: 1571:// As a C-function, ThreadFuncWithCLinkage cannot be templated itself.
        -: 1572:// Consequently, it cannot select a correct instantiation of ThreadWithParam
        -: 1573:// in order to call its Run(). Introducing ThreadWithParamBase as a
        -: 1574:// non-templated base class for ThreadWithParam allows us to bypass this
        -: 1575:// problem.
        -: 1576:class ThreadWithParamBase {
        -: 1577: public:
        -: 1578:  virtual ~ThreadWithParamBase() {}
        -: 1579:  virtual void Run() = 0;
        -: 1580:};
        -: 1581:
        -: 1582:// pthread_create() accepts a pointer to a function type with the C linkage.
        -: 1583:// According to the Standard (7.5/1), function types with different linkages
        -: 1584:// are different even if they are otherwise identical.  Some compilers (for
        -: 1585:// example, SunStudio) treat them as different types.  Since class methods
        -: 1586:// cannot be defined with C-linkage we need to define a free C-function to
        -: 1587:// pass into pthread_create().
        -: 1588:extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {
        -: 1589:  static_cast<ThreadWithParamBase*>(thread)->Run();
        -: 1590:  return NULL;
        -: 1591:}
        -: 1592:
        -: 1593:// Helper class for testing Google Test's multi-threading constructs.
        -: 1594:// To use it, write:
        -: 1595://
        -: 1596://   void ThreadFunc(int param) { /* Do things with param */ }
        -: 1597://   Notification thread_can_start;
        -: 1598://   ...
        -: 1599://   // The thread_can_start parameter is optional; you can supply NULL.
        -: 1600://   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);
        -: 1601://   thread_can_start.Notify();
        -: 1602://
        -: 1603:// These classes are only for testing Google Test's own constructs. Do
        -: 1604:// not use them in user tests, either directly or indirectly.
        -: 1605:template <typename T>
        -: 1606:class ThreadWithParam : public ThreadWithParamBase {
        -: 1607: public:
        -: 1608:  typedef void UserThreadFunc(T);
        -: 1609:
        -: 1610:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1611:      : func_(func),
        -: 1612:        param_(param),
        -: 1613:        thread_can_start_(thread_can_start),
        -: 1614:        finished_(false) {
        -: 1615:    ThreadWithParamBase* const base = this;
        -: 1616:    // The thread can be created only after all fields except thread_
        -: 1617:    // have been initialized.
        -: 1618:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 1619:        pthread_create(&thread_, 0, &ThreadFuncWithCLinkage, base));
        -: 1620:  }
        -: 1621:  ~ThreadWithParam() { Join(); }
        -: 1622:
        -: 1623:  void Join() {
        -: 1624:    if (!finished_) {
        -: 1625:      GTEST_CHECK_POSIX_SUCCESS_(pthread_join(thread_, 0));
        -: 1626:      finished_ = true;
        -: 1627:    }
        -: 1628:  }
        -: 1629:
        -: 1630:  virtual void Run() {
        -: 1631:    if (thread_can_start_ != NULL)
        -: 1632:      thread_can_start_->WaitForNotification();
        -: 1633:    func_(param_);
        -: 1634:  }
        -: 1635:
        -: 1636: private:
        -: 1637:  UserThreadFunc* const func_;  // User-supplied thread function.
        -: 1638:  const T param_;  // User-supplied parameter to the thread function.
        -: 1639:  // When non-NULL, used to block execution until the controller thread
        -: 1640:  // notifies.
        -: 1641:  Notification* const thread_can_start_;
        -: 1642:  bool finished_;  // true iff we know that the thread function has finished.
        -: 1643:  pthread_t thread_;  // The native thread object.
        -: 1644:
        -: 1645:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);
        -: 1646:};
        -: 1647:# endif  // !GTEST_OS_WINDOWS && GTEST_HAS_PTHREAD ||
        -: 1648:         // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1649:
        -: 1650:# if GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 1651:// Mutex and ThreadLocal have already been imported into the namespace.
        -: 1652:// Nothing to do here.
        -: 1653:
        -: 1654:# elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 1655:
        -: 1656:// Mutex implements mutex on Windows platforms.  It is used in conjunction
        -: 1657:// with class MutexLock:
        -: 1658://
        -: 1659://   Mutex mutex;
        -: 1660://   ...
        -: 1661://   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the
        -: 1662://                            // end of the current scope.
        -: 1663://
        -: 1664:// A static Mutex *must* be defined or declared using one of the following
        -: 1665:// macros:
        -: 1666://   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);
        -: 1667://   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);
        -: 1668://
        -: 1669:// (A non-static Mutex is defined/declared in the usual way).
        -: 1670:class GTEST_API_ Mutex {
        -: 1671: public:
        -: 1672:  enum MutexType { kStatic = 0, kDynamic = 1 };
        -: 1673:  // We rely on kStaticMutex being 0 as it is to what the linker initializes
        -: 1674:  // type_ in static mutexes.  critical_section_ will be initialized lazily
        -: 1675:  // in ThreadSafeLazyInit().
        -: 1676:  enum StaticConstructorSelector { kStaticMutex = 0 };
        -: 1677:
        -: 1678:  // This constructor intentionally does nothing.  It relies on type_ being
        -: 1679:  // statically initialized to 0 (effectively setting it to kStatic) and on
        -: 1680:  // ThreadSafeLazyInit() to lazily initialize the rest of the members.
        -: 1681:  explicit Mutex(StaticConstructorSelector /*dummy*/) {}
        -: 1682:
        -: 1683:  Mutex();
        -: 1684:  ~Mutex();
        -: 1685:
        -: 1686:  void Lock();
        -: 1687:
        -: 1688:  void Unlock();
        -: 1689:
        -: 1690:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1691:  // with high probability.
        -: 1692:  void AssertHeld();
        -: 1693:
        -: 1694: private:
        -: 1695:  // Initializes owner_thread_id_ and critical_section_ in static mutexes.
        -: 1696:  void ThreadSafeLazyInit();
        -: 1697:
        -: 1698:  // Per http://blogs.msdn.com/b/oldnewthing/archive/2004/02/23/78395.aspx,
        -: 1699:  // we assume that 0 is an invalid value for thread IDs.
        -: 1700:  unsigned int owner_thread_id_;
        -: 1701:
        -: 1702:  // For static mutexes, we rely on these members being initialized to zeros
        -: 1703:  // by the linker.
        -: 1704:  MutexType type_;
        -: 1705:  long critical_section_init_phase_;  // NOLINT
        -: 1706:  GTEST_CRITICAL_SECTION* critical_section_;
        -: 1707:
        -: 1708:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);
        -: 1709:};
        -: 1710:
        -: 1711:# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1712:    extern ::testing::internal::Mutex mutex
        -: 1713:
        -: 1714:# define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1715:    ::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)
        -: 1716:
        -: 1717:// We cannot name this class MutexLock because the ctor declaration would
        -: 1718:// conflict with a macro named MutexLock, which is defined on some
        -: 1719:// platforms. That macro is used as a defensive measure to prevent against
        -: 1720:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 1721:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 1722:class GTestMutexLock {
        -: 1723: public:
        -: 1724:  explicit GTestMutexLock(Mutex* mutex)
        -: 1725:      : mutex_(mutex) { mutex_->Lock(); }
        -: 1726:
        -: 1727:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 1728:
        -: 1729: private:
        -: 1730:  Mutex* const mutex_;
        -: 1731:
        -: 1732:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);
        -: 1733:};
        -: 1734:
        -: 1735:typedef GTestMutexLock MutexLock;
        -: 1736:
        -: 1737:// Base class for ValueHolder<T>.  Allows a caller to hold and delete a value
        -: 1738:// without knowing its type.
        -: 1739:class ThreadLocalValueHolderBase {
        -: 1740: public:
        -: 1741:  virtual ~ThreadLocalValueHolderBase() {}
        -: 1742:};
        -: 1743:
        -: 1744:// Provides a way for a thread to send notifications to a ThreadLocal
        -: 1745:// regardless of its parameter type.
        -: 1746:class ThreadLocalBase {
        -: 1747: public:
        -: 1748:  // Creates a new ValueHolder<T> object holding a default value passed to
        -: 1749:  // this ThreadLocal<T>'s constructor and returns it.  It is the caller's
        -: 1750:  // responsibility not to call this when the ThreadLocal<T> instance already
        -: 1751:  // has a value on the current thread.
        -: 1752:  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const = 0;
        -: 1753:
        -: 1754: protected:
        -: 1755:  ThreadLocalBase() {}
        -: 1756:  virtual ~ThreadLocalBase() {}
        -: 1757:
        -: 1758: private:
        -: 1759:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocalBase);
        -: 1760:};
        -: 1761:
        -: 1762:// Maps a thread to a set of ThreadLocals that have values instantiated on that
        -: 1763:// thread and notifies them when the thread exits.  A ThreadLocal instance is
        -: 1764:// expected to persist until all threads it has values on have terminated.
        -: 1765:class GTEST_API_ ThreadLocalRegistry {
        -: 1766: public:
        -: 1767:  // Registers thread_local_instance as having value on the current thread.
        -: 1768:  // Returns a value that can be used to identify the thread from other threads.
        -: 1769:  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
        -: 1770:      const ThreadLocalBase* thread_local_instance);
        -: 1771:
        -: 1772:  // Invoked when a ThreadLocal instance is destroyed.
        -: 1773:  static void OnThreadLocalDestroyed(
        -: 1774:      const ThreadLocalBase* thread_local_instance);
        -: 1775:};
        -: 1776:
        -: 1777:class GTEST_API_ ThreadWithParamBase {
        -: 1778: public:
        -: 1779:  void Join();
        -: 1780:
        -: 1781: protected:
        -: 1782:  class Runnable {
        -: 1783:   public:
        -: 1784:    virtual ~Runnable() {}
        -: 1785:    virtual void Run() = 0;
        -: 1786:  };
        -: 1787:
        -: 1788:  ThreadWithParamBase(Runnable *runnable, Notification* thread_can_start);
        -: 1789:  virtual ~ThreadWithParamBase();
        -: 1790:
        -: 1791: private:
        -: 1792:  AutoHandle thread_;
        -: 1793:};
        -: 1794:
        -: 1795:// Helper class for testing Google Test's multi-threading constructs.
        -: 1796:template <typename T>
        -: 1797:class ThreadWithParam : public ThreadWithParamBase {
        -: 1798: public:
        -: 1799:  typedef void UserThreadFunc(T);
        -: 1800:
        -: 1801:  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
        -: 1802:      : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {
        -: 1803:  }
        -: 1804:  virtual ~ThreadWithParam() {}
        -: 1805:
        -: 1806: private:
        -: 1807:  class RunnableImpl : public Runnable {
        -: 1808:   public:
        -: 1809:    RunnableImpl(UserThreadFunc* func, T param)
        -: 1810:        : func_(func),
        -: 1811:          param_(param) {
        -: 1812:    }
        -: 1813:    virtual ~RunnableImpl() {}
        -: 1814:    virtual void Run() {
        -: 1815:      func_(param_);
        -: 1816:    }
        -: 1817:
        -: 1818:   private:
        -: 1819:    UserThreadFunc* const func_;
        -: 1820:    const T param_;
        -: 1821:
        -: 1822:    GTEST_DISALLOW_COPY_AND_ASSIGN_(RunnableImpl);
        -: 1823:  };
        -: 1824:
        -: 1825:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParam);
        -: 1826:};
        -: 1827:
        -: 1828:// Implements thread-local storage on Windows systems.
        -: 1829://
        -: 1830://   // Thread 1
        -: 1831://   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.
        -: 1832://
        -: 1833://   // Thread 2
        -: 1834://   tl.set(150);  // Changes the value for thread 2 only.
        -: 1835://   EXPECT_EQ(150, tl.get());
        -: 1836://
        -: 1837://   // Thread 1
        -: 1838://   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.
        -: 1839://   tl.set(200);
        -: 1840://   EXPECT_EQ(200, tl.get());
        -: 1841://
        -: 1842:// The template type argument T must have a public copy constructor.
        -: 1843:// In addition, the default ThreadLocal constructor requires T to have
        -: 1844:// a public default constructor.
        -: 1845://
        -: 1846:// The users of a TheadLocal instance have to make sure that all but one
        -: 1847:// threads (including the main one) using that instance have exited before
        -: 1848:// destroying it. Otherwise, the per-thread objects managed for them by the
        -: 1849:// ThreadLocal instance are not guaranteed to be destroyed on all platforms.
        -: 1850://
        -: 1851:// Google Test only uses global ThreadLocal objects.  That means they
        -: 1852:// will die after main() has returned.  Therefore, no per-thread
        -: 1853:// object managed by Google Test will be leaked as long as all threads
        -: 1854:// using Google Test have exited when main() returns.
        -: 1855:template <typename T>
        -: 1856:class ThreadLocal : public ThreadLocalBase {
        -: 1857: public:
        -: 1858:  ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}
        -: 1859:  explicit ThreadLocal(const T& value)
        -: 1860:      : default_factory_(new InstanceValueHolderFactory(value)) {}
        -: 1861:
        -: 1862:  ~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }
        -: 1863:
        -: 1864:  T* pointer() { return GetOrCreateValue(); }
        -: 1865:  const T* pointer() const { return GetOrCreateValue(); }
        -: 1866:  const T& get() const { return *pointer(); }
        -: 1867:  void set(const T& value) { *pointer() = value; }
        -: 1868:
        -: 1869: private:
        -: 1870:  // Holds a value of T.  Can be deleted via its base class without the caller
        -: 1871:  // knowing the type of T.
        -: 1872:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 1873:   public:
        -: 1874:    ValueHolder() : value_() {}
        -: 1875:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 1876:
        -: 1877:    T* pointer() { return &value_; }
        -: 1878:
        -: 1879:   private:
        -: 1880:    T value_;
        -: 1881:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);
        -: 1882:  };
        -: 1883:
        -: 1884:
        -: 1885:  T* GetOrCreateValue() const {
        -: 1886:    return static_cast<ValueHolder*>(
        -: 1887:        ThreadLocalRegistry::GetValueOnCurrentThread(this))->pointer();
        -: 1888:  }
        -: 1889:
        -: 1890:  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {
        -: 1891:    return default_factory_->MakeNewHolder();
        -: 1892:  }
        -: 1893:
        -: 1894:  class ValueHolderFactory {
        -: 1895:   public:
        -: 1896:    ValueHolderFactory() {}
        -: 1897:    virtual ~ValueHolderFactory() {}
        -: 1898:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 1899:
        -: 1900:   private:
        -: 1901:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);
        -: 1902:  };
        -: 1903:
        -: 1904:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 1905:   public:
        -: 1906:    DefaultValueHolderFactory() {}
        -: 1907:    virtual ValueHolder* MakeNewHolder() const { return new ValueHolder(); }
        -: 1908:
        -: 1909:   private:
        -: 1910:    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);
        -: 1911:  };
        -: 1912:
        -: 1913:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 1914:   public:
        -: 1915:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        -: 1916:    virtual ValueHolder* MakeNewHolder() const {
        -: 1917:      return new ValueHolder(value_);
        -: 1918:    }
        -: 1919:
        -: 1920:   private:
        -: 1921:    const T value_;  // The value for each thread.
        -: 1922:
        -: 1923:    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);
        -: 1924:  };
        -: 1925:
        -: 1926:  scoped_ptr<ValueHolderFactory> default_factory_;
        -: 1927:
        -: 1928:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);
        -: 1929:};
        -: 1930:
        -: 1931:# elif GTEST_HAS_PTHREAD
        -: 1932:
        -: 1933:// MutexBase and Mutex implement mutex on pthreads-based platforms.
        -: 1934:class MutexBase {
        -: 1935: public:
        -: 1936:  // Acquires this mutex.
        -: 1937:  void Lock() {
        -: 1938:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_lock(&mutex_));
        -: 1939:    owner_ = pthread_self();
        -: 1940:    has_owner_ = true;
        -: 1941:  }
        -: 1942:
        -: 1943:  // Releases this mutex.
        -: 1944:  void Unlock() {
        -: 1945:    // Since the lock is being released the owner_ field should no longer be
        -: 1946:    // considered valid. We don't protect writing to has_owner_ here, as it's
        -: 1947:    // the caller's responsibility to ensure that the current thread holds the
        -: 1948:    // mutex when this is called.
        -: 1949:    has_owner_ = false;
        -: 1950:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_unlock(&mutex_));
        -: 1951:  }
        -: 1952:
        -: 1953:  // Does nothing if the current thread holds the mutex. Otherwise, crashes
        -: 1954:  // with high probability.
        -: 1955:  void AssertHeld() const {
        -: 1956:    GTEST_CHECK_(has_owner_ && pthread_equal(owner_, pthread_self()))
        -: 1957:        << "The current thread is not holding the mutex @" << this;
        -: 1958:  }
        -: 1959:
        -: 1960:  // A static mutex may be used before main() is entered.  It may even
        -: 1961:  // be used before the dynamic initialization stage.  Therefore we
        -: 1962:  // must be able to initialize a static mutex object at link time.
        -: 1963:  // This means MutexBase has to be a POD and its member variables
        -: 1964:  // have to be public.
        -: 1965: public:
        -: 1966:  pthread_mutex_t mutex_;  // The underlying pthread mutex.
        -: 1967:  // has_owner_ indicates whether the owner_ field below contains a valid thread
        -: 1968:  // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All
        -: 1969:  // accesses to the owner_ field should be protected by a check of this field.
        -: 1970:  // An alternative might be to memset() owner_ to all zeros, but there's no
        -: 1971:  // guarantee that a zero'd pthread_t is necessarily invalid or even different
        -: 1972:  // from pthread_self().
        -: 1973:  bool has_owner_;
        -: 1974:  pthread_t owner_;  // The thread holding the mutex.
        -: 1975:};
        -: 1976:
        -: 1977:// Forward-declares a static mutex.
        -: 1978:#  define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 1979:     extern ::testing::internal::MutexBase mutex
        -: 1980:
        -: 1981:// Defines and statically (i.e. at link time) initializes a static mutex.
        -: 1982:#  define GTEST_DEFINE_STATIC_MUTEX_(mutex) \
        -: 1983:     ::testing::internal::MutexBase mutex = { PTHREAD_MUTEX_INITIALIZER, false, pthread_t() }
        -: 1984:
        -: 1985:// The Mutex class can only be used for mutexes created at runtime. It
        -: 1986:// shares its API with MutexBase otherwise.
        -: 1987:class Mutex : public MutexBase {
        -: 1988: public:
        -: 1989:  Mutex() {
        -: 1990:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_init(&mutex_, NULL));
        -: 1991:    has_owner_ = false;
        -: 1992:  }
        -: 1993:  ~Mutex() {
        -: 1994:    GTEST_CHECK_POSIX_SUCCESS_(pthread_mutex_destroy(&mutex_));
        -: 1995:  }
        -: 1996:
        -: 1997: private:
        -: 1998:  GTEST_DISALLOW_COPY_AND_ASSIGN_(Mutex);
        -: 1999:};
        -: 2000:
        -: 2001:// We cannot name this class MutexLock because the ctor declaration would
        -: 2002:// conflict with a macro named MutexLock, which is defined on some
        -: 2003:// platforms. That macro is used as a defensive measure to prevent against
        -: 2004:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 2005:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 2006:class GTestMutexLock {
        -: 2007: public:
        -: 2008:  explicit GTestMutexLock(MutexBase* mutex)
        -: 2009:      : mutex_(mutex) { mutex_->Lock(); }
        -: 2010:
        -: 2011:  ~GTestMutexLock() { mutex_->Unlock(); }
        -: 2012:
        -: 2013: private:
        -: 2014:  MutexBase* const mutex_;
        -: 2015:
        -: 2016:  GTEST_DISALLOW_COPY_AND_ASSIGN_(GTestMutexLock);
        -: 2017:};
        -: 2018:
        -: 2019:typedef GTestMutexLock MutexLock;
        -: 2020:
        -: 2021:// Helpers for ThreadLocal.
        -: 2022:
        -: 2023:// pthread_key_create() requires DeleteThreadLocalValue() to have
        -: 2024:// C-linkage.  Therefore it cannot be templatized to access
        -: 2025:// ThreadLocal<T>.  Hence the need for class
        -: 2026:// ThreadLocalValueHolderBase.
        -: 2027:class ThreadLocalValueHolderBase {
        -: 2028: public:
        -: 2029:  virtual ~ThreadLocalValueHolderBase() {}
        -: 2030:};
        -: 2031:
        -: 2032:// Called by pthread to delete thread-local data stored by
        -: 2033:// pthread_setspecific().
        -: 2034:extern "C" inline void DeleteThreadLocalValue(void* value_holder) {
        -: 2035:  delete static_cast<ThreadLocalValueHolderBase*>(value_holder);
        -: 2036:}
        -: 2037:
        -: 2038:// Implements thread-local storage on pthreads-based systems.
        -: 2039:template <typename T>
        -: 2040:class ThreadLocal {
        -: 2041: public:
        -: 2042:  ThreadLocal()
        -: 2043:      : key_(CreateKey()), default_factory_(new DefaultValueHolderFactory()) {}
        -: 2044:  explicit ThreadLocal(const T& value)
        -: 2045:      : key_(CreateKey()),
        -: 2046:        default_factory_(new InstanceValueHolderFactory(value)) {}
        -: 2047:
        -: 2048:  ~ThreadLocal() {
        -: 2049:    // Destroys the managed object for the current thread, if any.
        -: 2050:    DeleteThreadLocalValue(pthread_getspecific(key_));
        -: 2051:
        -: 2052:    // Releases resources associated with the key.  This will *not*
        -: 2053:    // delete managed objects for other threads.
        -: 2054:    GTEST_CHECK_POSIX_SUCCESS_(pthread_key_delete(key_));
        -: 2055:  }
        -: 2056:
        -: 2057:  T* pointer() { return GetOrCreateValue(); }
        -: 2058:  const T* pointer() const { return GetOrCreateValue(); }
        -: 2059:  const T& get() const { return *pointer(); }
        -: 2060:  void set(const T& value) { *pointer() = value; }
        -: 2061:
        -: 2062: private:
        -: 2063:  // Holds a value of type T.
        -: 2064:  class ValueHolder : public ThreadLocalValueHolderBase {
        -: 2065:   public:
        -: 2066:    ValueHolder() : value_() {}
        -: 2067:    explicit ValueHolder(const T& value) : value_(value) {}
        -: 2068:
        -: 2069:    T* pointer() { return &value_; }
        -: 2070:
        -: 2071:   private:
        -: 2072:    T value_;
        -: 2073:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolder);
        -: 2074:  };
        -: 2075:
        -: 2076:  static pthread_key_t CreateKey() {
        -: 2077:    pthread_key_t key;
        -: 2078:    // When a thread exits, DeleteThreadLocalValue() will be called on
        -: 2079:    // the object managed for that thread.
        -: 2080:    GTEST_CHECK_POSIX_SUCCESS_(
        -: 2081:        pthread_key_create(&key, &DeleteThreadLocalValue));
        -: 2082:    return key;
        -: 2083:  }
        -: 2084:
        -: 2085:  T* GetOrCreateValue() const {
        -: 2086:    ThreadLocalValueHolderBase* const holder =
        -: 2087:        static_cast<ThreadLocalValueHolderBase*>(pthread_getspecific(key_));
        -: 2088:    if (holder != NULL) {
        -: 2089:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
        -: 2090:    }
        -: 2091:
        -: 2092:    ValueHolder* const new_holder = default_factory_->MakeNewHolder();
        -: 2093:    ThreadLocalValueHolderBase* const holder_base = new_holder;
        -: 2094:    GTEST_CHECK_POSIX_SUCCESS_(pthread_setspecific(key_, holder_base));
        -: 2095:    return new_holder->pointer();
        -: 2096:  }
        -: 2097:
        -: 2098:  class ValueHolderFactory {
        -: 2099:   public:
        -: 2100:    ValueHolderFactory() {}
        -: 2101:    virtual ~ValueHolderFactory() {}
        -: 2102:    virtual ValueHolder* MakeNewHolder() const = 0;
        -: 2103:
        -: 2104:   private:
        -: 2105:    GTEST_DISALLOW_COPY_AND_ASSIGN_(ValueHolderFactory);
        -: 2106:  };
        -: 2107:
        -: 2108:  class DefaultValueHolderFactory : public ValueHolderFactory {
        -: 2109:   public:
        -: 2110:    DefaultValueHolderFactory() {}
        -: 2111:    virtual ValueHolder* MakeNewHolder() const { return new ValueHolder(); }
        -: 2112:
        -: 2113:   private:
        -: 2114:    GTEST_DISALLOW_COPY_AND_ASSIGN_(DefaultValueHolderFactory);
        -: 2115:  };
        -: 2116:
        -: 2117:  class InstanceValueHolderFactory : public ValueHolderFactory {
        -: 2118:   public:
        -: 2119:    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
        -: 2120:    virtual ValueHolder* MakeNewHolder() const {
        -: 2121:      return new ValueHolder(value_);
        -: 2122:    }
        -: 2123:
        -: 2124:   private:
        -: 2125:    const T value_;  // The value for each thread.
        -: 2126:
        -: 2127:    GTEST_DISALLOW_COPY_AND_ASSIGN_(InstanceValueHolderFactory);
        -: 2128:  };
        -: 2129:
        -: 2130:  // A key pthreads uses for looking up per-thread values.
        -: 2131:  const pthread_key_t key_;
        -: 2132:  scoped_ptr<ValueHolderFactory> default_factory_;
        -: 2133:
        -: 2134:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadLocal);
        -: 2135:};
        -: 2136:
        -: 2137:# endif  // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
        -: 2138:
        -: 2139:#else  // GTEST_IS_THREADSAFE
        -: 2140:
        -: 2141:// A dummy implementation of synchronization primitives (mutex, lock,
        -: 2142:// and thread-local variable).  Necessary for compiling Google Test where
        -: 2143:// mutex is not supported - using Google Test in multiple threads is not
        -: 2144:// supported on such platforms.
        -: 2145:
        -: 2146:class Mutex {
        -: 2147: public:
        -: 2148:  Mutex() {}
        -: 2149:  void Lock() {}
        -: 2150:  void Unlock() {}
        -: 2151:  void AssertHeld() const {}
        -: 2152:};
        -: 2153:
        -: 2154:# define GTEST_DECLARE_STATIC_MUTEX_(mutex) \
        -: 2155:  extern ::testing::internal::Mutex mutex
        -: 2156:
        -: 2157:# define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex
        -: 2158:
        -: 2159:// We cannot name this class MutexLock because the ctor declaration would
        -: 2160:// conflict with a macro named MutexLock, which is defined on some
        -: 2161:// platforms. That macro is used as a defensive measure to prevent against
        -: 2162:// inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than
        -: 2163:// "MutexLock l(&mu)".  Hence the typedef trick below.
        -: 2164:class GTestMutexLock {
        -: 2165: public:
        -: 2166:  explicit GTestMutexLock(Mutex*) {}  // NOLINT
        -: 2167:};
        -: 2168:
        -: 2169:typedef GTestMutexLock MutexLock;
        -: 2170:
        -: 2171:template <typename T>
        -: 2172:class ThreadLocal {
        -: 2173: public:
        -: 2174:  ThreadLocal() : value_() {}
        -: 2175:  explicit ThreadLocal(const T& value) : value_(value) {}
        -: 2176:  T* pointer() { return &value_; }
        -: 2177:  const T* pointer() const { return &value_; }
        -: 2178:  const T& get() const { return value_; }
        -: 2179:  void set(const T& value) { value_ = value; }
        -: 2180: private:
        -: 2181:  T value_;
        -: 2182:};
        -: 2183:
        -: 2184:#endif  // GTEST_IS_THREADSAFE
        -: 2185:
        -: 2186:// Returns the number of threads running in the process, or 0 to indicate that
        -: 2187:// we cannot detect it.
        -: 2188:GTEST_API_ size_t GetThreadCount();
        -: 2189:
        -: 2190:// Passing non-POD classes through ellipsis (...) crashes the ARM
        -: 2191:// compiler and generates a warning in Sun Studio.  The Nokia Symbian
        -: 2192:// and the IBM XL C/C++ compiler try to instantiate a copy constructor
        -: 2193:// for objects passed through ellipsis (...), failing for uncopyable
        -: 2194:// objects.  We define this to ensure that only POD is passed through
        -: 2195:// ellipsis on these systems.
        -: 2196:#if defined(__SYMBIAN32__) || defined(__IBMCPP__) || defined(__SUNPRO_CC)
        -: 2197:// We lose support for NULL detection where the compiler doesn't like
        -: 2198:// passing non-POD classes through ellipsis (...).
        -: 2199:# define GTEST_ELLIPSIS_NEEDS_POD_ 1
        -: 2200:#else
        -: 2201:# define GTEST_CAN_COMPARE_NULL 1
        -: 2202:#endif
        -: 2203:
        -: 2204:// The Nokia Symbian and IBM XL C/C++ compilers cannot decide between
        -: 2205:// const T& and const T* in a function template.  These compilers
        -: 2206:// _can_ decide between class template specializations for T and T*,
        -: 2207:// so a tr1::type_traits-like is_pointer works.
        -: 2208:#if defined(__SYMBIAN32__) || defined(__IBMCPP__)
        -: 2209:# define GTEST_NEEDS_IS_POINTER_ 1
        -: 2210:#endif
        -: 2211:
        -: 2212:template <bool bool_value>
        -: 2213:struct bool_constant {
        -: 2214:  typedef bool_constant<bool_value> type;
        -: 2215:  static const bool value = bool_value;
        -: 2216:};
        -: 2217:template <bool bool_value> const bool bool_constant<bool_value>::value;
        -: 2218:
        -: 2219:typedef bool_constant<false> false_type;
        -: 2220:typedef bool_constant<true> true_type;
        -: 2221:
        -: 2222:template <typename T>
        -: 2223:struct is_pointer : public false_type {};
        -: 2224:
        -: 2225:template <typename T>
        -: 2226:struct is_pointer<T*> : public true_type {};
        -: 2227:
        -: 2228:template <typename Iterator>
        -: 2229:struct IteratorTraits {
        -: 2230:  typedef typename Iterator::value_type value_type;
        -: 2231:};
        -: 2232:
        -: 2233:template <typename T>
        -: 2234:struct IteratorTraits<T*> {
        -: 2235:  typedef T value_type;
        -: 2236:};
        -: 2237:
        -: 2238:template <typename T>
        -: 2239:struct IteratorTraits<const T*> {
        -: 2240:  typedef T value_type;
        -: 2241:};
        -: 2242:
        -: 2243:#if GTEST_OS_WINDOWS
        -: 2244:# define GTEST_PATH_SEP_ "\\"
        -: 2245:# define GTEST_HAS_ALT_PATH_SEP_ 1
        -: 2246:// The biggest signed integer type the compiler supports.
        -: 2247:typedef __int64 BiggestInt;
        -: 2248:#else
        -: 2249:# define GTEST_PATH_SEP_ "/"
        -: 2250:# define GTEST_HAS_ALT_PATH_SEP_ 0
        -: 2251:typedef long long BiggestInt;  // NOLINT
        -: 2252:#endif  // GTEST_OS_WINDOWS
        -: 2253:
        -: 2254:// Utilities for char.
        -: 2255:
        -: 2256:// isspace(int ch) and friends accept an unsigned char or EOF.  char
        -: 2257:// may be signed, depending on the compiler (or compiler flags).
        -: 2258:// Therefore we need to cast a char to unsigned char before calling
        -: 2259:// isspace(), etc.
        -: 2260:
        -: 2261:inline bool IsAlpha(char ch) {
        -: 2262:  return isalpha(static_cast<unsigned char>(ch)) != 0;
        -: 2263:}
        -: 2264:inline bool IsAlNum(char ch) {
        -: 2265:  return isalnum(static_cast<unsigned char>(ch)) != 0;
        -: 2266:}
        -: 2267:inline bool IsDigit(char ch) {
        -: 2268:  return isdigit(static_cast<unsigned char>(ch)) != 0;
        -: 2269:}
        -: 2270:inline bool IsLower(char ch) {
        -: 2271:  return islower(static_cast<unsigned char>(ch)) != 0;
        -: 2272:}
        -: 2273:inline bool IsSpace(char ch) {
        -: 2274:  return isspace(static_cast<unsigned char>(ch)) != 0;
        -: 2275:}
        -: 2276:inline bool IsUpper(char ch) {
        -: 2277:  return isupper(static_cast<unsigned char>(ch)) != 0;
        -: 2278:}
        -: 2279:inline bool IsXDigit(char ch) {
        -: 2280:  return isxdigit(static_cast<unsigned char>(ch)) != 0;
        -: 2281:}
        -: 2282:inline bool IsXDigit(wchar_t ch) {
        -: 2283:  const unsigned char low_byte = static_cast<unsigned char>(ch);
        -: 2284:  return ch == low_byte && isxdigit(low_byte) != 0;
        -: 2285:}
        -: 2286:
        -: 2287:inline char ToLower(char ch) {
        -: 2288:  return static_cast<char>(tolower(static_cast<unsigned char>(ch)));
        -: 2289:}
        -: 2290:inline char ToUpper(char ch) {
        -: 2291:  return static_cast<char>(toupper(static_cast<unsigned char>(ch)));
        -: 2292:}
        -: 2293:
        -: 2294:inline std::string StripTrailingSpaces(std::string str) {
        -: 2295:  std::string::iterator it = str.end();
        -: 2296:  while (it != str.begin() && IsSpace(*--it))
        -: 2297:    it = str.erase(it);
        -: 2298:  return str;
        -: 2299:}
        -: 2300:
        -: 2301:// The testing::internal::posix namespace holds wrappers for common
        -: 2302:// POSIX functions.  These wrappers hide the differences between
        -: 2303:// Windows/MSVC and POSIX systems.  Since some compilers define these
        -: 2304:// standard functions as macros, the wrapper cannot have the same name
        -: 2305:// as the wrapped function.
        -: 2306:
        -: 2307:namespace posix {
        -: 2308:
        -: 2309:// Functions with a different name on Windows.
        -: 2310:
        -: 2311:#if GTEST_OS_WINDOWS
        -: 2312:
        -: 2313:typedef struct _stat StatStruct;
        -: 2314:
        -: 2315:# ifdef __BORLANDC__
        -: 2316:inline int IsATTY(int fd) { return isatty(fd); }
        -: 2317:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 2318:  return stricmp(s1, s2);
        -: 2319:}
        -: 2320:inline char* StrDup(const char* src) { return strdup(src); }
        -: 2321:# else  // !__BORLANDC__
        -: 2322:#  if GTEST_OS_WINDOWS_MOBILE
        -: 2323:inline int IsATTY(int /* fd */) { return 0; }
        -: 2324:#  else
        -: 2325:inline int IsATTY(int fd) { return _isatty(fd); }
        -: 2326:#  endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2327:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 2328:  return _stricmp(s1, s2);
        -: 2329:}
        -: 2330:inline char* StrDup(const char* src) { return _strdup(src); }
        -: 2331:# endif  // __BORLANDC__
        -: 2332:
        -: 2333:# if GTEST_OS_WINDOWS_MOBILE
        -: 2334:inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }
        -: 2335:// Stat(), RmDir(), and IsDir() are not needed on Windows CE at this
        -: 2336:// time and thus not defined there.
        -: 2337:# else
        -: 2338:inline int FileNo(FILE* file) { return _fileno(file); }
        -: 2339:inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }
        -: 2340:inline int RmDir(const char* dir) { return _rmdir(dir); }
        -: 2341:inline bool IsDir(const StatStruct& st) {
        -: 2342:  return (_S_IFDIR & st.st_mode) != 0;
        -: 2343:}
        -: 2344:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2345:
        -: 2346:#else
        -: 2347:
        -: 2348:typedef struct stat StatStruct;
        -: 2349:
        -: 2350:inline int FileNo(FILE* file) { return fileno(file); }
        -: 2351:inline int IsATTY(int fd) { return isatty(fd); }
        -: 2352:inline int Stat(const char* path, StatStruct* buf) { return stat(path, buf); }
        -: 2353:inline int StrCaseCmp(const char* s1, const char* s2) {
        -: 2354:  return strcasecmp(s1, s2);
        -: 2355:}
        -: 2356:inline char* StrDup(const char* src) { return strdup(src); }
        -: 2357:inline int RmDir(const char* dir) { return rmdir(dir); }
        -: 2358:inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
        -: 2359:
        -: 2360:#endif  // GTEST_OS_WINDOWS
        -: 2361:
        -: 2362:// Functions deprecated by MSVC 8.0.
        -: 2363:
        -: 2364:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996 /* deprecated function */)
        -: 2365:
        -: 2366:inline const char* StrNCpy(char* dest, const char* src, size_t n) {
        -: 2367:  return strncpy(dest, src, n);
        -: 2368:}
        -: 2369:
        -: 2370:// ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and
        -: 2371:// StrError() aren't needed on Windows CE at this time and thus not
        -: 2372:// defined there.
        -: 2373:
        -: 2374:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 2375:inline int ChDir(const char* dir) { return chdir(dir); }
        -: 2376:#endif
        -: 2377:inline FILE* FOpen(const char* path, const char* mode) {
        -: 2378:  return fopen(path, mode);
        -: 2379:}
        -: 2380:#if !GTEST_OS_WINDOWS_MOBILE
        -: 2381:inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {
        -: 2382:  return freopen(path, mode, stream);
        -: 2383:}
        -: 2384:inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }
        -: 2385:#endif
        -: 2386:inline int FClose(FILE* fp) { return fclose(fp); }
        -: 2387:#if !GTEST_OS_WINDOWS_MOBILE
        -: 2388:inline int Read(int fd, void* buf, unsigned int count) {
        -: 2389:  return static_cast<int>(read(fd, buf, count));
        -: 2390:}
        -: 2391:inline int Write(int fd, const void* buf, unsigned int count) {
        -: 2392:  return static_cast<int>(write(fd, buf, count));
        -: 2393:}
        -: 2394:inline int Close(int fd) { return close(fd); }
        -: 2395:inline const char* StrError(int errnum) { return strerror(errnum); }
        -: 2396:#endif
        -: 2397:inline const char* GetEnv(const char* name) {
        -: 2398:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE | GTEST_OS_WINDOWS_RT
        -: 2399:  // We are on Windows CE, which has no environment variables.
        -: 2400:  static_cast<void>(name);  // To prevent 'unused argument' warning.
        -: 2401:  return NULL;
        -: 2402:#elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)
        -: 2403:  // Environment variables which we programmatically clear will be set to the
        -: 2404:  // empty string rather than unset (NULL).  Handle that case.
        -: 2405:  const char* const env = getenv(name);
        -: 2406:  return (env != NULL && env[0] != '\0') ? env : NULL;
        -: 2407:#else
        -: 2408:  return getenv(name);
        -: 2409:#endif
        -: 2410:}
        -: 2411:
        -: 2412:GTEST_DISABLE_MSC_WARNINGS_POP_()
        -: 2413:
        -: 2414:#if GTEST_OS_WINDOWS_MOBILE
        -: 2415:// Windows CE has no C library. The abort() function is used in
        -: 2416:// several places in Google Test. This implementation provides a reasonable
        -: 2417:// imitation of standard behaviour.
        -: 2418:void Abort();
        -: 2419:#else
        -: 2420:inline void Abort() { abort(); }
        -: 2421:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 2422:
        -: 2423:}  // namespace posix
        -: 2424:
        -: 2425:// MSVC "deprecates" snprintf and issues warnings wherever it is used.  In
        -: 2426:// order to avoid these warnings, we need to use _snprintf or _snprintf_s on
        -: 2427:// MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate
        -: 2428:// function in order to achieve that.  We use macro definition here because
        -: 2429:// snprintf is a variadic function.
        -: 2430:#if _MSC_VER >= 1400 && !GTEST_OS_WINDOWS_MOBILE
        -: 2431:// MSVC 2005 and above support variadic macros.
        -: 2432:# define GTEST_SNPRINTF_(buffer, size, format, ...) \
        -: 2433:     _snprintf_s(buffer, size, size, format, __VA_ARGS__)
        -: 2434:#elif defined(_MSC_VER)
        -: 2435:// Windows CE does not define _snprintf_s and MSVC prior to 2005 doesn't
        -: 2436:// complain about _snprintf.
        -: 2437:# define GTEST_SNPRINTF_ _snprintf
        -: 2438:#else
        -: 2439:# define GTEST_SNPRINTF_ snprintf
        -: 2440:#endif
        -: 2441:
        -: 2442:// The maximum number a BiggestInt can represent.  This definition
        -: 2443:// works no matter BiggestInt is represented in one's complement or
        -: 2444:// two's complement.
        -: 2445://
        -: 2446:// We cannot rely on numeric_limits in STL, as __int64 and long long
        -: 2447:// are not part of standard C++ and numeric_limits doesn't need to be
        -: 2448:// defined for them.
        -: 2449:const BiggestInt kMaxBiggestInt =
        -: 2450:    ~(static_cast<BiggestInt>(1) << (8*sizeof(BiggestInt) - 1));
        -: 2451:
        -: 2452:// This template class serves as a compile-time function from size to
        -: 2453:// type.  It maps a size in bytes to a primitive type with that
        -: 2454:// size. e.g.
        -: 2455://
        -: 2456://   TypeWithSize<4>::UInt
        -: 2457://
        -: 2458:// is typedef-ed to be unsigned int (unsigned integer made up of 4
        -: 2459:// bytes).
        -: 2460://
        -: 2461:// Such functionality should belong to STL, but I cannot find it
        -: 2462:// there.
        -: 2463://
        -: 2464:// Google Test uses this class in the implementation of floating-point
        -: 2465:// comparison.
        -: 2466://
        -: 2467:// For now it only handles UInt (unsigned int) as that's all Google Test
        -: 2468:// needs.  Other types can be easily added in the future if need
        -: 2469:// arises.
        -: 2470:template <size_t size>
        -: 2471:class TypeWithSize {
        -: 2472: public:
        -: 2473:  // This prevents the user from using TypeWithSize<N> with incorrect
        -: 2474:  // values of N.
        -: 2475:  typedef void UInt;
        -: 2476:};
        -: 2477:
        -: 2478:// The specialization for size 4.
        -: 2479:template <>
        -: 2480:class TypeWithSize<4> {
        -: 2481: public:
        -: 2482:  // unsigned int has size 4 in both gcc and MSVC.
        -: 2483:  //
        -: 2484:  // As base/basictypes.h doesn't compile on Windows, we cannot use
        -: 2485:  // uint32, uint64, and etc here.
        -: 2486:  typedef int Int;
        -: 2487:  typedef unsigned int UInt;
        -: 2488:};
        -: 2489:
        -: 2490:// The specialization for size 8.
        -: 2491:template <>
        -: 2492:class TypeWithSize<8> {
        -: 2493: public:
        -: 2494:#if GTEST_OS_WINDOWS
        -: 2495:  typedef __int64 Int;
        -: 2496:  typedef unsigned __int64 UInt;
        -: 2497:#else
        -: 2498:  typedef long long Int;  // NOLINT
        -: 2499:  typedef unsigned long long UInt;  // NOLINT
        -: 2500:#endif  // GTEST_OS_WINDOWS
        -: 2501:};
        -: 2502:
        -: 2503:// Integer types of known sizes.
        -: 2504:typedef TypeWithSize<4>::Int Int32;
        -: 2505:typedef TypeWithSize<4>::UInt UInt32;
        -: 2506:typedef TypeWithSize<8>::Int Int64;
        -: 2507:typedef TypeWithSize<8>::UInt UInt64;
        -: 2508:typedef TypeWithSize<8>::Int TimeInMillis;  // Represents time in milliseconds.
        -: 2509:
        -: 2510:// Utilities for command line flags and environment variables.
        -: 2511:
        -: 2512:// Macro for referencing flags.
        -: 2513:#if !defined(GTEST_FLAG)
        -: 2514:# define GTEST_FLAG(name) FLAGS_gtest_##name
        -: 2515:#endif  // !defined(GTEST_FLAG)
        -: 2516:
        -: 2517:#if !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)
        -: 2518:# define GTEST_USE_OWN_FLAGFILE_FLAG_ 1
        -: 2519:#endif  // !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)
        -: 2520:
        -: 2521:#if !defined(GTEST_DECLARE_bool_)
        -: 2522:# define GTEST_FLAG_SAVER_ ::testing::internal::GTestFlagSaver
        -: 2523:
        -: 2524:// Macros for declaring flags.
        -: 2525:# define GTEST_DECLARE_bool_(name) GTEST_API_ extern bool GTEST_FLAG(name)
        -: 2526:# define GTEST_DECLARE_int32_(name) \
        -: 2527:    GTEST_API_ extern ::testing::internal::Int32 GTEST_FLAG(name)
        -: 2528:#define GTEST_DECLARE_string_(name) \
        -: 2529:    GTEST_API_ extern ::std::string GTEST_FLAG(name)
        -: 2530:
        -: 2531:// Macros for defining flags.
        -: 2532:#define GTEST_DEFINE_bool_(name, default_val, doc) \
        -: 2533:    GTEST_API_ bool GTEST_FLAG(name) = (default_val)
        -: 2534:#define GTEST_DEFINE_int32_(name, default_val, doc) \
        -: 2535:    GTEST_API_ ::testing::internal::Int32 GTEST_FLAG(name) = (default_val)
        -: 2536:#define GTEST_DEFINE_string_(name, default_val, doc) \
        -: 2537:    GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val)
        -: 2538:
        -: 2539:#endif  // !defined(GTEST_DECLARE_bool_)
        -: 2540:
        -: 2541:// Thread annotations
        -: 2542:#if !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2543:# define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)
        -: 2544:# define GTEST_LOCK_EXCLUDED_(locks)
        -: 2545:#endif  // !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)
        -: 2546:
        -: 2547:// Parses 'str' for a 32-bit signed integer.  If successful, writes the result
        -: 2548:// to *value and returns true; otherwise leaves *value unchanged and returns
        -: 2549:// false.
        -: 2550:// TODO(chandlerc): Find a better way to refactor flag and environment parsing
        -: 2551:// out of both gtest-port.cc and gtest.cc to avoid exporting this utility
        -: 2552:// function.
        -: 2553:bool ParseInt32(const Message& src_text, const char* str, Int32* value);
        -: 2554:
        -: 2555:// Parses a bool/Int32/string from the environment variable
        -: 2556:// corresponding to the given Google Test flag.
        -: 2557:bool BoolFromGTestEnv(const char* flag, bool default_val);
        -: 2558:GTEST_API_ Int32 Int32FromGTestEnv(const char* flag, Int32 default_val);
        -: 2559:std::string StringFromGTestEnv(const char* flag, const char* default_val);
        -: 2560:
        -: 2561:}  // namespace internal
        -: 2562:}  // namespace testing
        -: 2563:
        -: 2564:#endif  // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
