        -:    0:Source:src/RequestHandler.h
        -:    0:Graph:src/StatusHandler.gcno
        -:    0:Data:src/StatusHandler.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef REQUESTHANDLER_H
        -:    2:#define REQUESTHANDLER_H
        -:    3:
        -:    4:#include <map>
        -:    5:#include <string>
        -:    6:#include <memory>
        -:    7:#include "Response.h"
        -:    8:#include "Request.h"
        -:    9:#include "nginx-configparser/config_parser.h"
        -:   10:
        1:   11:const std::string header_content_type_ = "Content-Type";
        1:   12:const std::string NOT_FOUND_HANDLER = "NOTFOUND";
        1:   13:const std::string STATUS_HANDLER = "/status";
        -:   14:
    #####:   15:class RequestHandler {
        -:   16:public:
        -:   17:    enum Status {
        -:   18:        OK = 0,
        -:   19:        NOT_FOUND = 1,
        -:   20:        NOT_ENOUGH_PARAM = 2
        -:   21:        // Define your status codes here.
        -:   22:    };
        -:   23:    static RequestHandler* CreateByName(const char* type);
        -:   24:    // Initializes the handler. Returns true if successful.
        -:   25:    // uri_prefix is the value in the config file that this handler will run for.
        -:   26:    // config is the contents of the child block for this handler ONLY.
        -:   27:    virtual Status Init(const std::string& uri_prefix,
        -:   28:                        const NginxConfig& config) = 0;
        -:   29:
        -:   30:    // Handles an HTTP request, and generates a response. Returns a response code
        -:   31:    // indicating success or failure condition. If ResponseCode is not OK, the
        -:   32:    // contents of the response object are undefined, and the server will return
        -:   33:    // HTTP code 500.
        -:   34:    virtual Status HandleRequest(const Request& request,
        -:   35:                                 Response* response) = 0;
        -:   36:};
        -:   37:
        -:   38:extern std::map<std::string, RequestHandler* (*)(void)>* request_handler_builders;
        -:   39:template<typename T>
        -:   40:class RequestHandlerRegisterer {
        -:   41: public:
    #####:   42:  RequestHandlerRegisterer(const std::string& type) {
    #####:   43:    if (request_handler_builders == nullptr) {
    #####:   44:      request_handler_builders = new std::map<std::string, RequestHandler* (*)(void)>;
        -:   45:    }
    #####:   46:    (*request_handler_builders)[type] = RequestHandlerRegisterer::Create;
    #####:   47:  }
    #####:   48:  static RequestHandler* Create() {
    #####:   49:    return new T;
        -:   50:  }
        -:   51:};
        -:   52:
        -:   53:#define REGISTER_REQUEST_HANDLER(ClassName) \
        -:   54:  static RequestHandlerRegisterer<ClassName> ClassName##__registerer(#ClassName)
        -:   55:
        -:   56:#endif
